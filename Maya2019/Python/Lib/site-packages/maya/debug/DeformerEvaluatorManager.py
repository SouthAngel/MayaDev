"""
Helper class that maintains the deformer evaluator mode information.
Manages the deformer evaluator-specific data, the common data is
managed by the base class.

The object is set up to use the Python "with" syntax as follows:

    from maya.debug.DeformerEvaluatorManager import DeformerEvaluatorManager
    with DeformerEvaluatorManager() as mgr:
        mgr.setMode( someMode )

That will ensure the original states are all restored. There's no other
reliable way to do it in Python. If you need different syntax you can
manually call the method to complete the sequence:

    mgr = DeformerEvaluatorManager()
    mgr.save_state()
    mgr.setMode( someMode )
    mgr.restore_state()
"""
import maya.cmds as cmds
from maya.debug.EvaluatorManager import EvaluatorManager

__all__ = [ 'DeformerEvaluatorManager'
          , 'KEY_VERIFY_BUFFERS'
          ]

# Name of the plug-in containing the cache evaluator
PLUGIN_NAME = 'deformerEvaluator'

# Name of the evaluator
EVALUATOR_NAME = 'deformer'

# Name of optionVar used to preserve the state of the GPU override
OPTIONVAR_GPU_OVERRIDE = 'gpuOverride'

# Keys for the dictionary containing configuration information
KEY_VERIFY_BUFFERS = 'verifyBuffers'

#======================================================================
class DeformerEvaluatorManager(EvaluatorManager):
    '''
    Class for managing the deformer evaluator state in a 'with' format. Remembers
    and restores the deformer parameters.
    '''
    #----------------------------------------------------------------------
    class DeformerEvaluatorState(EvaluatorManager.EvaluatorState):
        '''
        State information of the evaluator
            override_option  : State of the GPU override optionVar
            verify_buffers   : State of the verifyBuffers configuration option
        '''
        def __init__(self):
            '''Set the state information to some default values'''
            super( DeformerEvaluatorManager.DeformerEvaluatorState, self ).__init__()
            self.override_option = False
            self.verify_buffers = False

    #----------------------------------------------------------------------
    def save_state(self):
        '''
        Remember the current state of all related parameters so that they
        can be restored on exit.
        '''
        self.dbg( 'DeformerEvaluatorManager.save_state' )
        self.state = DeformerEvaluatorManager.DeformerEvaluatorState()
        super( DeformerEvaluatorManager, self ).save_state()

        # This value will be remembered even if the plug-in is not loaded because it
        # is stored as an optionVar.
        self.state.override_option = self.override_option

        # If the plug-in failed to load there's no data to collect
        if not self.state.plugin_loaded:
            return

        #----------------------------------------
        # Deformer-specific parameters
        self.state.verify_buffers = self.verify_buffers

    #----------------------------------------------------------------------
    def __init__(self):
        '''
        __enter__ is defined in the parent class
        '''
        super( DeformerEvaluatorManager, self ).__init__( EVALUATOR_NAME, PLUGIN_NAME )

        self.dbg( 'DeformerEvaluatorManager.__init__' )
        self.state = None

    #----------------------------------------------------------------------
    def __exit__(self,type,value,traceback): # pylint: disable=redefined-builtin
        '''Ensure the state is restored if this object goes out of scope'''

        self.dbg( 'DeformerEvaluatorManager.__exit__' )
        self.dbg( '    Type      = {}'.format(type) )
        self.dbg( '    Value     = {}'.format(value) )
        self.dbg( '    Traceback = {}'.format(traceback) )

        self.restore_state()

    #----------------------------------------------------------------------
    def as_json(self):
        '''Display mechanism to retrieve evaluator information in a format conducive to JSON formatting'''

        info = super( DeformerEvaluatorManager, self ).as_json()

        if not self.plugin_loaded:
            return

        info.update( { KEY_VERIFY_BUFFERS     : self.verify_buffers
                     , OPTIONVAR_GPU_OVERRIDE : self.override_option
                     } )

        return info

    #----------------------------------------------------------------------
    def set_state(self, new_state):
        '''
        Define the cache evaluator state parameters.
        :param new_state: State information in the format provided by as_json
                          Only key values specified will change. Others retain
                          their current values (*not* default values).
        '''
        if not self.plugin_loaded:
            return

        super( DeformerEvaluatorManager, self ).set_state( new_state )

        self.dbg( 'DeformerEvaluatorManager.set_state to {}'.format( new_state ) )

        for key,value in new_state.iteritems():
            if key == KEY_VERIFY_BUFFERS:
                self.verify_buffers = value
            elif key == OPTIONVAR_GPU_OVERRIDE:
                self.override_option = value
            # No else case because the base class has its own keys

    #----------------------------------------------------------------------
    def restore_state(self):
        '''
        Restore the cache evaluator to its original mode prior to creation of
        this object. Using the "with" syntax this will be called automatically.
        You only need to call explicitly when you instantiate the mode manager
        as an object.
        '''
        self.dbg( 'DeformerEvaluatorManager.restore_state' )
        super( DeformerEvaluatorManager, self ).restore_state()

        # Restore the evaluator state. If the plug-in wasn't loaded or was
        # unloaded by the base class there's no need to restore the information.
        if self.plugin_loaded:
            self.verify_buffers = self.state.verify_buffers

        # This is an optionVar and does not rely on the plug-in
        self.override_option = self.state.override_option

    #----------------------------------------------------------------------
    #
    # Use properties to make it easier to access the evaluator information
    #
    @property
    def verify_buffers(self):
        '''Return the evaluator's verify_buffers state'''
        return cmds.evaluator( name=self.evaluator_name, valueName='verifyBuffers', query=True )

    @verify_buffers.setter
    def verify_buffers(self, new_value):
        '''
        Give the evaluator a new verify_buffers state
        :param new_value: New verify_buffers state for the evaluator
        '''
        if self.verify_buffers == new_value:
            return

        self.dbg( 'Setting verify_buffers to {}'.format(new_value) )
        try:
            cmds.evaluator( name=self.evaluator_name, configuration='verifyBuffers={}'.format(new_value) )
        except Exception, ex:
            self.err( '--- Failed : {}'.format(ex) )

    #----------------------------------------
    @property
    def override_option(self):
        '''Return the optionVar for the GPU override value'''
        return cmds.optionVar(query=OPTIONVAR_GPU_OVERRIDE)

    @override_option.setter
    def override_option(self, new_value):
        '''
        Set the GPU override state for the evaluator. (Actually it's an optionVar but it only
        applies to this evaluator so the effect is the same.)
        :param new_value: New GPU override state for the evaluator
        '''
        if self.override_option == new_value:
            return

        self.dbg( 'Setting GPU override state to {}'.format(new_value) )
        try:
            cmds.optionVar( intValue=(OPTIONVAR_GPU_OVERRIDE,new_value) )
        except Exception, ex:
            self.err( '--- Failed : {}'.format(ex) )

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
