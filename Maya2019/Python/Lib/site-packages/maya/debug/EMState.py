"""
Utility to contain the EM state information. This is only the information
regarding the configuration of the EM, such as evaluators enabled and
their parameters.

State information is returned in JSON format for easy storage, parsing,
and comparison.

    {
        "emState" :
        {
            "mode" : EM_MODE,
            "enabled" : true,
            ...
            "evaluators" :
            {
                EVALUATOR_NAME :
                {
                    node_types : [],
                    enabled    : true,
                    ...
                },
                ...
            },
        }
"""
import json
import maya.cmds as cmds
from maya.debug.EvaluatorManager import EvaluatorManager
from maya.debug.DeformerEvaluatorManager import DeformerEvaluatorManager
from maya.plugin.evaluator.CacheEvaluatorManager import CacheEvaluatorManager

__all__ = [ 'EMState' ]

#======================================================================
class EMState(object):
    """
    State object containing all configuration values for the EM. This doesn't attempt
    to read any scene-specific information, only the global configuration information
    such as evaluators enabled, evaluation mode, etc.

    :member results_files: Where the intermediate results are stored. None means don't store them.
    :member state:         Data state information from the scene.
    """
    #----------------------------------------------------------------------
    def __init__(self):
        """
        Create a new state object and read all of the current state information.
        """
        # Evaluators that have specific evaluators can provide more information
        evaluator_managers = { 'cache' : CacheEvaluatorManager(), 'deformer' : DeformerEvaluatorManager()}

        # First capture the general EM state
        self.enabled = cmds.evaluationManager( query=True, enabled=True )
        self.idle_action = cmds.evaluationManager( query=True, idleAction=True )
        self.manipulation = cmds.evaluationManager( query=True, manipulation=True )
        self.mode = cmds.evaluationManager( query=True, mode=True )
        self.safe_mode = cmds.evaluationManager( query=True, safeMode=True )
        self.node_type_globally_serialize = cmds.evaluationManager( query=True, ntg=True ) or []
        self.node_type_parallel = cmds.evaluationManager( query=True, ntp=True ) or []
        self.node_type_serialize = cmds.evaluationManager( query=True, nts=True ) or []
        self.node_type_untrusted = cmds.evaluationManager( query=True, ntu=True ) or []

        # Walk the evaluators and get their information from the EvaluatorManager
        self.evaluators = {}
        for evaluator in cmds.evaluator( query=True ):
            if evaluator in evaluator_managers:
                mgr = evaluator_managers[evaluator]
            else:
                # Use None for plug-in as even if it needed a plug-in we can't tell which one from here
                mgr = EvaluatorManager(evaluator, None)
            mgr.save_state()
            self.evaluators[evaluator] = mgr.as_json()

    #----------------------------------------------------------------------
    def __str__(self):
        """
        Dump the state as a string. This converts the state information into a JSON
        indented format to make it easier to read.
        """
        state = { 'enabled'                      : self.enabled
                , 'idle_action'                  : self.idle_action
                , 'manipulation'                 : self.manipulation
                , 'mode'                         : self.mode
                , 'safe_mode'                    : self.safe_mode
                , 'node_type_globally_serialize' : self.node_type_globally_serialize
                , 'node_type_parallel'           : self.node_type_parallel
                , 'node_type_serialize'          : self.node_type_serialize
                , 'node_type_untrusted'          : self.node_type_untrusted
                , 'evaluators'                   : {}
                }
        for evaluator,evaluator_info in self.evaluators.iteritems():
            state['evaluators'][evaluator] = evaluator_info

        return json.dumps( { 'emState' : state }, indent=4 )

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
