import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Implementation of the cached playback portion of the Timeslider preferences.
'''
from functools import partial
import maya.cmds as cmds
from maya.common.ui import LayoutManager, callback_tool
from maya.common.utils import Singleton
from maya.plugin.evaluator.CacheUiBase import CacheUiBase
from maya.plugin.evaluator.cache_preferences import CachePreferenceEnabled, cache_preferences_initialize
from maya.plugin.evaluator.cache_optionvar_states import CachePreferenceShowCacheStatus, CachePreferenceShowWarningFrames
from maya.plugin.evaluator.cache_optionvar_states import CachePreferenceShowInvalidatedFrames, CachePreferenceShowSubframes
from maya.plugin.evaluator.cache_optionvar_states import CachePreferenceTimesliderBarHeight, CachePreferenceTimesliderBarSpacing, CachePreferenceTimesliderBarPosition
from maya.plugin.evaluator.CacheEvaluatorManager import CacheEvaluatorManager

__all__ = ['CacheUiTimesliderPreferences']

#======================================================================
class CacheUiTimesliderPreferences(CacheUiBase):
    '''
    Class to manage the UI for the cache HUD preferences.

    :member widgets: Set of widgets used to manage the various UI for the cache HUD state
    '''
    __metaclass__ = Singleton

    # Indexes into self.widgets, independently managed
    ID_ROOT           = 0
    ID_STATUS         = 1
    ID_POSITION       = 2
    ID_HEIGHT         = 3
    ID_SPACING        = 4
    ID_SHOW_INVALID   = 5
    ID_SHOW_SUBFRAMES = 6
    ID_SHOW_WARNING   = 7

    # The set of optionVars that affect the state of this UI
    OPTION_VARS_MONITORED = [ CachePreferenceEnabled()
                            , CachePreferenceShowCacheStatus()
                            , CachePreferenceTimesliderBarSpacing()
                            , CachePreferenceTimesliderBarHeight()
                            , CachePreferenceShowInvalidatedFrames()
                            , CachePreferenceShowSubframes()
                            , CachePreferenceTimesliderBarPosition()
                            ]

    def __init__(self):
        '''
        Initialize the toolkit widgets to be empty initially
        '''
        super(CacheUiTimesliderPreferences, self).__init__()
        self.widgets = {}

        # Unique ID used for client notifications from CachePreferences()
        self.ui_key = 'cache_preferences_in_timeslider_preferences'

        # Make sure the prefs have already been set up
        cache_preferences_initialize()

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_status(value, tool):
        '''Callback invoked when the status changes through the UI.'''
        CachePreferenceShowCacheStatus().set_value_directly( tool, value )
        tool.update_ui()

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_location(value, location, tool):
        '''Callback invoked when the cache timeslider bar location changes through the UI'''
        assert value # Should not get a callback when switched off
        CachePreferenceTimesliderBarPosition().set_value_directly( tool, ['above','below'][location] )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_height(value, tool):
        '''Callback invoked when the cache timeslider bar height changes through the UI'''
        CachePreferenceTimesliderBarHeight().set_value_directly( tool, value )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_spacing(value, tool):
        '''Callback invoked when the cache timeslider bar spacing changes through the UI'''
        CachePreferenceTimesliderBarSpacing().set_value_directly( tool, value )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_show_invalidated_frames(value, tool):
        '''Callback invoked when the cache timeslider invalidated frame display state changes through the UI'''
        CachePreferenceShowInvalidatedFrames().set_value_directly( tool, value )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_show_subframes(value, tool):
        '''Callback invoked when the cache timeslider subframe frame display state changes through the UI'''
        CachePreferenceShowSubframes().set_value_directly( tool, value )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_show_warning_frames(value, tool):
        '''Callback invoked when the cache timeslider warning frame display state changes through the UI'''
        CachePreferenceShowWarningFrames().set_value_directly( tool, value )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_ui(tool):
        '''
        Callback to match the visibility of the UI with the plug-in loaded state
        :param tool: CacheUiTimesliderPreferences object to be updated
        '''
        tool.update_ui()

    #----------------------------------------------------------------------
    def plugin_state_change(self, new_state):
        '''
        Called when the plug-in state changed to loaded or unloaded. Updates the UI appearance to
        reflect the new state.
        :param new_state: True if the plug-in was just loaded, False if just unloaded
        '''
        self.update_ui( plugin_state=new_state )

    #----------------------------------------------------------------------
    def update_ui(self, plugin_state=None):
        '''Update the preferences UI based on the current values of the optionVars
        :param plugin_state: If specified then it is the new plug-in loaded state, otherwise it is read from the evaluator manager
        '''
        # If the root is not in the widgets, nothing is
        if self.ID_ROOT not in self.widgets:
            return

        # The enabled state can only be read when the plug-in is loaded, the others are always available
        enabled = False
        plugin_loaded = plugin_state if plugin_state is not None else CacheEvaluatorManager().plugin_loaded
        if plugin_loaded:
            enabled = CacheEvaluatorManager().enabled

        cmds.frameLayout( self.widgets[self.ID_ROOT], edit=True, enable=enabled, visible=plugin_loaded )

        cmds.checkBoxGrp( self.widgets[self.ID_STATUS], edit=True, value1=CachePreferenceShowCacheStatus().get_value() )

        # Disabling showing the cache status means there is no reason to access the other controls
        enabled = enabled and CachePreferenceShowCacheStatus().get_value()

        cmds.intSliderGrp(   self.widgets[self.ID_SPACING],        edit=True, enable=enabled, value=CachePreferenceTimesliderBarSpacing().get_value() )
        cmds.intSliderGrp(   self.widgets[self.ID_HEIGHT],         edit=True, enable=enabled, value=CachePreferenceTimesliderBarHeight().get_value() )
        cmds.checkBoxGrp(    self.widgets[self.ID_SHOW_INVALID],   edit=True, enable=enabled, value1=CachePreferenceShowInvalidatedFrames().get_value() )
        cmds.checkBoxGrp(    self.widgets[self.ID_SHOW_SUBFRAMES], edit=True, enable=enabled, value1=CachePreferenceShowSubframes().get_value() )
        cmds.radioButtonGrp( self.widgets[self.ID_POSITION],       edit=True, enable=enabled, select=CachePreferenceTimesliderBarPosition().find_index( CachePreferenceTimesliderBarPosition().get_value() ) )

        cmds.checkBoxGrp(  self.widgets[self.ID_SHOW_WARNING], edit=True, enable=enabled, value1=CachePreferenceShowWarningFrames().get_value() )

    #----------------------------------------------------------------------
    def create_ui(self):
        ''' Creates the Cached Playback frame used in the Timeslider preferences window tab.'''
        assert len(self.widgets) == 0

        self.widgets[self.ID_ROOT] = cmds.frameLayout(maya.stringTable['y_CacheUiTimesliderPreferences.kFrameCachedPlaybackStatus' ])
        with LayoutManager( self.widgets[self.ID_ROOT] ):
            with LayoutManager( cmds.columnLayout(adjustableColumn=True, rowSpacing=5) ):

                control = cmds.checkBoxGrp( label=''
                                          , label1=CachePreferenceShowCacheStatus().title
                                          , annotation=CachePreferenceShowCacheStatus().info
                                          , numberOfCheckBoxes=1
                                          , columnWidth=[2, 100]
                                          , changeCommand=partial(self.callback_update_status, tool=self)
                                          )
                self.widgets[self.ID_STATUS] = control

                control = cmds.radioButtonGrp( label=CachePreferenceTimesliderBarPosition().title
                                             , annotation=CachePreferenceTimesliderBarPosition().info
                                             , label1=CachePreferenceTimesliderBarPosition().DATA[0][1]
                                             , annotation1=CachePreferenceTimesliderBarPosition().DATA[0][2]
                                             , label2=CachePreferenceTimesliderBarPosition().DATA[1][1]
                                             , annotation2=CachePreferenceTimesliderBarPosition().DATA[1][2]
                                             , numberOfRadioButtons=2
                                             , onCommand1=partial(self.callback_update_location, location=0, tool=self)
                                             , onCommand2=partial(self.callback_update_location, location=1, tool=self)
                                             )
                self.widgets[self.ID_POSITION] = control

                control = cmds.intSliderGrp( label=CachePreferenceTimesliderBarHeight().title
                                           , annotation=CachePreferenceTimesliderBarHeight().info
                                           , field=True
                                           , min=1
                                           , max=50
                                           , columnWidth=[2, 30]
                                           , changeCommand=partial(self.callback_update_height, tool=self)
                                           )
                self.widgets[self.ID_HEIGHT] = control

                control = cmds.intSliderGrp( label=CachePreferenceTimesliderBarSpacing().title
                                           , annotation=CachePreferenceTimesliderBarSpacing().info
                                           , field=True
                                           , min=0
                                           , max=50
                                           , columnWidth=[2, 30]
                                           , changeCommand=partial(self.callback_update_spacing, tool=self)
                                           )
                self.widgets[self.ID_SPACING] = control

                control = cmds.checkBoxGrp( label=''
                                          , label1=CachePreferenceShowInvalidatedFrames().title
                                          , annotation=CachePreferenceShowInvalidatedFrames().info
                                          , numberOfCheckBoxes=1
                                          , columnWidth=[2, 100]
                                          , changeCommand=partial(self.callback_update_show_invalidated_frames, tool=self)
                                          )
                self.widgets[self.ID_SHOW_INVALID] = control

                control = cmds.checkBoxGrp( label=''
                                          , label1=CachePreferenceShowSubframes().title
                                          , annotation=CachePreferenceShowSubframes().info
                                          , numberOfCheckBoxes=1
                                          , columnWidth=[2, 100]
                                          , changeCommand=partial(self.callback_update_show_subframes, tool=self)
                                          )
                self.widgets[self.ID_SHOW_SUBFRAMES] = control

                control = cmds.checkBoxGrp( label=''
                                          , label1=CachePreferenceShowWarningFrames().title
                                          , annotation=CachePreferenceShowWarningFrames().info
                                          , numberOfCheckBoxes=1
                                          , columnWidth=[2, 100]
                                          , changeCommand=partial(self.callback_update_show_warning_frames, tool=self)
                                          )
                self.widgets[self.ID_SHOW_WARNING] = control

        self.monitor_window()

        # Automatically remove this information when the control is deleted
        cmds.scriptJob( uiDeleted=(self.widgets[self.ID_ROOT], callback_tool(self, partial(self.callback_ui_deleted, element=self.ID_ROOT))) )
        for option_var in self.OPTION_VARS_MONITORED:
            option_var.add_client( self, callback_tool(self, self.callback_update_ui) )

        # Initialize the state of the widgets to the current state of the preferences
        if CacheEvaluatorManager().plugin_loaded:
            self.update_ui()

        return self.widgets[self.ID_ROOT]

    #----------------------------------------------------------------------
    @staticmethod
    def callback_ui_deleted(tool, element):
        '''
        Invoked when the UI is deleted - cleans up the class variables and client monitoring
        :param tool: CacheUiTimesliderPreferences object attached to the UI that was deleted
        '''
        for option_var in tool.OPTION_VARS_MONITORED:
            option_var.remove_client( tool )

        tool.widgets = {}

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
