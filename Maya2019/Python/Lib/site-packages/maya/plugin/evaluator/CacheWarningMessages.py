import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Management of warning messages that the cached playback configuration can create.
'''
import maya.cmds as cmds
from maya.common.ui import callback_tool
from maya.common.utils import Singleton
from maya.plugin.evaluator.cache_optionvar_states import CachePreferenceMemoryThreshold, CachePreferenceResourceGuard, CachePreferenceShowWarningMessages
from maya.plugin.evaluator.CacheScriptJobHelper import CacheScriptJobHelper, EVENT_LIMIT_CHANGE, EVENT_SAFE_MODE, EVENT_EM_DISABLED, EVENT_CACHE_DESTROYED
from maya.plugin.evaluator.CacheEvaluatorManager import CacheEvaluatorManager

__all__ = ['CacheWarningMessages']

#======================================================================
def in_em_mode():
    '''
    :return: True if the current evaluation is one of the EM modes (i.e. not DG)
    '''
    return cmds.evaluationManager(query=True,mode=True)[0] != 'off'

#======================================================================
class CacheWarningMessages(object):
    '''
    Class to manage the display and handling of cache warning messages.
    :member silenced: Set of warnings that have been silenced, either temporarily or permanently
    :member cache_mgr: Local references to a CacheEvaluatorManager for getting state information
    :member last_memory_state: Last encountered state of memory usage
    :member last_safe_trigger: Last encountered safe mode trigger
    :member last_safe_messages: Last encountered safe mode messages
    :member last_resource_state: Last encountered resource state
    :member last_disable_message: Last reason the EM was disabled
    :member last_evaluation_mode: Last evaluation mode
    :member last_had_animation: True if animation existed last time the evaluator change was triggered
    '''
    __metaclass__ = Singleton

    # Indexes into message types
    MSG_MEMORY_LOW = 0
    MSG_MEMORY_OUT = 1

    def __init__(self):
        '''
        Initialize the toolkit widgets to be empty initially
        '''
        self.silenced = {}
        self.last_memory_state = 'undefined'
        self.last_safe_trigger = False
        self.last_safe_messages = ''
        self.last_resource_state = 'undefined'
        self.cache_mgr = CacheEvaluatorManager()
        self.last_disable_message = None
        self.last_had_animation = not cmds.evaluationManager( query=True, empty=True )

        # Initialize the EM state - we only want warnings when the state changes
        self.last_evaluation_mode = in_em_mode()

        # Start listening to the changes in state that can create warning messages
        memory_message_reset_callback = callback_tool(self, self.callback_reset_message_warnings)
        CachePreferenceMemoryThreshold().add_client( self, memory_message_reset_callback )
        CachePreferenceResourceGuard().add_client( self, memory_message_reset_callback )

        CacheScriptJobHelper().add_client( self, EVENT_LIMIT_CHANGE,    self.callback_memory_state_changed )
        CacheScriptJobHelper().add_client( self, EVENT_SAFE_MODE,       self.callback_safe_mode_event )
        CacheScriptJobHelper().add_client( self, EVENT_EM_DISABLED,     self.callback_em_disabled_changed )
        CacheScriptJobHelper().add_client( self, EVENT_CACHE_DESTROYED, self.callback_reset_message_warnings )

        self.mode_change_job   = cmds.scriptJob( event=('customEvaluatorChanged', callback_tool(self, self.callback_evaluation_mode_changed)) )
        self.file_new_job      = cmds.scriptJob( event=('PreFileNewOrOpened', callback_tool(self, self.callback_reset_message_warnings)) )

    #----------------------------------------------------------------------
    def messaging_wanted(self):
        ''':return: True if the EM and cache evaluator are in states where the warning messages are desirable'''
        # If caching isn't turned on then no message should be produced
        if not self.cache_mgr.plugin_loaded or not self.cache_mgr.enabled:
            return False

        # If the evaluation manager has been disabled then caching messages are irrelevant
        if not cmds.evaluationManager( query=True, enabled=True ):
            return False

        # If the evaluation manager has no animation then caching messages are irrelevant
        if cmds.evaluationManager( query=True, empty=True ):
            return False

        return True

    #----------------------------------------------------------------------
    @staticmethod
    def callback_reset_message_warnings(tool):
        '''Invoked when an event happens that should (re)enable warnings for low memory conditions'''
        if tool.MSG_MEMORY_LOW in tool.silenced:
            del tool.silenced[tool.MSG_MEMORY_LOW]
        if tool.MSG_MEMORY_OUT in tool.silenced:
            del tool.silenced[tool.MSG_MEMORY_OUT]

        tool.last_resource_state = None
        tool.last_had_animation = False

        # Check to see if a message is needed with the new settings
        tool.callback_memory_state_changed( tool=tool )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_evaluation_mode_changed(tool):
        '''
        Callback received when the some sort of configuration changed happened to the EM modes.
        This callback is only concerned with transitions to and from DG evaluation mode so all
        other configuration changes are ignored.
        '''
        # If caching isn't turned on then no message should be produced
        if not tool.cache_mgr.plugin_loaded or not tool.cache_mgr.enabled:
            return

        # Check to see if the status of animation existence has changed
        previous_had_animation = tool.last_had_animation
        tool.last_had_animation = not cmds.evaluationManager( query=True, empty=True )

        previous_evaluation_mode = tool.last_evaluation_mode
        tool.last_evaluation_mode = in_em_mode()

        # If the evaluation mode went from EM to DG, and the EM had animation already, and
        # messaging is enabled then send the warning.
        if not tool.last_evaluation_mode and previous_evaluation_mode and previous_had_animation and CachePreferenceShowWarningMessages().get_value():
            print maya.stringTable['y_CacheWarningMessages.kWarnEMOffMsg' ]
            cmds.warning( maya.stringTable['y_CacheWarningMessages.kWarnEMOff' ] )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_em_disabled_changed(tool):
        '''
        Callback received when the evaluation manager has been disabled internally, e.g. due to
        a configuration that the EM cannot handle such as motion blur being enabled in VP2
        '''
        # If caching isn't turned on then no message should be produced
        if not tool.cache_mgr.plugin_loaded or not tool.cache_mgr.enabled:
            return

        # If the evaluation manager is invalid don't change the message yet
        if not cmds.evaluationManager( query=True, inv=True ):
            return

        previous_disable_message = tool.last_disable_message
        tool.last_disable_message = cmds.evaluationManager( query=True, disableInfo=True )

        # If the EM has disable information, messaging is one, and the new message is different
        # from the previous message then send the warning
        if tool.last_disable_message is not None and CachePreferenceShowWarningMessages().get_value() and tool.last_disable_message != previous_disable_message:
            print tool.last_disable_message
            cmds.warning( maya.stringTable['y_CacheWarningMessages.kWarnEMDisabled' ] )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_safe_mode_event(tool):
        '''
        Invoked when the safe mode state has been set, or the safe mode messages have been set.
        Safe mode messages are only displayed when transitioning from normal mode to safe mode,
        or when in safe mode with messages that are different from the last time they were reported.
        '''
        # If messaging isn't wanted then don't even check
        if not tool.messaging_wanted():
            return

        # Warnings are neeed if the message went from empty to non-empty
        warning_needed = False
        # Messages are neeed if the message is non-empty and not the same as last reporting time
        messages_needed = False

        # If messages are different than last time remember them here
        new_safe_messages = None

        new_safe_trigger = tool.cache_mgr.safe_mode_triggered
        if new_safe_trigger != tool.last_safe_trigger:
            if new_safe_trigger:
                new_safe_messages = tool.cache_mgr.safe_mode_messages
                warning_needed = True
                messages_needed = True
            tool.last_safe_trigger = new_safe_trigger
        elif new_safe_trigger:
            new_safe_messages = tool.cache_mgr.safe_mode_messages
            if new_safe_messages != tool.last_safe_messages:
                messages_needed = True

        # If the safe mode has changed and warnings are enabled then report the safe mode messages
        if messages_needed:
            tool.last_safe_messages = new_safe_messages
            if CachePreferenceShowWarningMessages().get_value():
                if new_safe_messages is None:
                    new_safe_messages = maya.stringTable['y_CacheWarningMessages.kSafeModeUnknown' ]
                print new_safe_messages
                if warning_needed:
                    cmds.warning( maya.stringTable['y_CacheWarningMessages.kSafeModeTriggered' ] )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_memory_state_changed(tool):
        '''
        Invoked when the state of the resource usage or the limit values have changed.
        Memory messages are silenced after their first use and only re-enabled in a new
        session, or if the resource guard or memory threshold values changed.
        '''
        # If messaging isn't wanted then don't even check
        if not tool.messaging_wanted():
            return

        # If the evaluation manager is invalid don't change the message yet
        if not cmds.evaluationManager( query=True, inv=True ):
            return

        # If the resource usage state has transitioned into a low or out of memory state warn the user
        new_resource_state = tool.cache_mgr.resource_state

        if CachePreferenceShowWarningMessages().get_value():
            if new_resource_state != tool.last_resource_state:
                if new_resource_state == 'low':
                    if tool.MSG_MEMORY_LOW not in tool.silenced:
                        print 'Cached Playback: Memory dedicated to caching is at 90% or less, memory will soon run out. To keep working with caching, reduce your playback range or allocate more memory to caching in the Cached Playback part of the Animation Preferences.'
                        cmds.warning( maya.stringTable['y_CacheWarningMessages.kLowMemoryWarning' ] )
                    tool.silenced[tool.MSG_MEMORY_LOW] = True
                elif new_resource_state == 'out':
                    if tool.MSG_MEMORY_OUT not in tool.silenced:
                        print 'Cached Playback: Memory dedicated to caching has reached its limit, so caching has stopped. To keep working with caching, reduce your playback range or allocate more memory to caching in the Cached Playback part of the Animation Preferences'
                        cmds.warning( maya.stringTable['y_CacheWarningMessages.kNoMemoryWarning' ] )
                    tool.silenced[tool.MSG_MEMORY_OUT] = True

        tool.last_resource_state = new_resource_state

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
