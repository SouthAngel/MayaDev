import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Functions and classes that manage the profiler's event description window.
Open with the following, normally controlled by the profiler:

    import maya.app.profilerEventDescriptionWindow.profilerEventDescriptionWindow as pew
    pew.create_window()
'''
import json
import maya.cmds as cmds
from maya.common.ui import LayoutManager

# For now, we only expose the entry point to the window creation
__all__ = ['create_window']

# Parameters to the frameLayout command for a standard configuration frame
FRAME_MARGIN_WIDTH = 25
FRAME_MARGIN_HEIGHT = 4
FRAME_LAYOUT = dict(
    marginWidth=FRAME_MARGIN_WIDTH,
    marginHeight=FRAME_MARGIN_HEIGHT,
    collapsable=True
    )
COL_SPACING = 10  # Standard spacing between columns
ROW_SPACING = 4   # Standard spacing between rows
# Parameters for the rowColumnLayout command with a standard 2 or 3 column layout
RC_LAYOUT_2_COLUMN = dict(
  adjustableColumn=2
, columnAlign=[(1, 'left'), (2, 'left')]
, columnSpacing=[(1,COL_SPACING), (2,COL_SPACING)] )
RC_LAYOUT_5_COLUMN = dict(
  adjustableColumn=3
, columnAlign=[(1, 'left'), (2, 'left'), (3, 'left'), (4, 'left'), (5, 'center')]
, columnSpacing=[(1,COL_SPACING), (2,COL_SPACING), (3,COL_SPACING), (4,COL_SPACING), (5,COL_SPACING)] )
# Parameters for the text command to set formatting for a table header
TABLE_HEADER = dict( font='boldLabelFont', backgroundColor=[0.3,0.3,0.3] )

# These keywords must match the JSON output from TprofilerToolAction
KEY_MAIN        = "eventSummary"
KEY_TYPE        = "type"
KEY_DESCRIPTION = "description"
KEY_COLOUR      = "color"
KEY_CATEGORY    = "category"
KEY_COUNT       = "count"

# Window controller object
PROFILER_EVENT_DESCRIPTION_WINDOW_CONTROLLER = None

###############################################################################
#                                                                             #
#  UI class                                                                   #
#                                                                             #
###############################################################################
class EventDescriptionWindow(object):
    '''
    This is the main UI class for the profiler event description window.

    It handles creation of the UI and provides various callbacks to handle
    user interactions.
    '''

    #----------------------------------------------------------------------
    def __init__(self, window_name="profilerEventDescriptionWindowId"):
        '''
        This does not create the UI.  UI creation is deferred until create() is called
        :param window_name: UI name for the window
        '''
        self.window_title = maya.stringTable['y_profilerEventDescriptionWindow.kEventDescriptionWindowTitle' ]
        self.window_name = window_name
        self.root_layout = None
        # scriptJob ID for watching selection changes
        self.selection_changed_job = None

    #----------------------------------------------------------------------
    @staticmethod
    def populate_event_types(selected_event_types):
        '''
        Populate the section of the window containing the event type information
        :param selected_event_types: List of dictionaries with event type description information
            KEY_TYPE        = Name of event type (Not present for anonymous events)
            KEY_DESCRIPTION = Description of event type (Not present for anonymous events)
            KEY_COLOUR      = List of 3 floats representing R, G, B of the event type
            KEY_CATEGORY    = Name of the category to which the event type belongs
            KEY_COUNT       = Number of events of this type found
        '''
        with LayoutManager( cmds.frameLayout(label=maya.stringTable['y_profilerEventDescriptionWindow.kFrameEventTypes' ], **FRAME_LAYOUT)):
            # If no selection then reduce the contents of the window to a single message
            if len(selected_event_types) == 0:
                cmds.text( label=maya.stringTable['y_profilerEventDescriptionWindow.kNoSelection'] )
                return

            with LayoutManager( cmds.rowColumnLayout(numberOfColumns=5 , **RC_LAYOUT_5_COLUMN ) ):
                cmds.text( label=maya.stringTable['y_profilerEventDescriptionWindow.kEventTypeNameColumnLabel'], **TABLE_HEADER )
                cmds.text( label=maya.stringTable['y_profilerEventDescriptionWindow.kEventTypeCategoryColumnLabel'], **TABLE_HEADER )
                cmds.text( label=maya.stringTable['y_profilerEventDescriptionWindow.kEventTypeDescriptionColumnLabel'], wordWrap=True, **TABLE_HEADER )
                cmds.text( label=maya.stringTable['y_profilerEventDescriptionWindow.kEventTypeColorColumnLabel'], **TABLE_HEADER )
                cmds.text( label=maya.stringTable['y_profilerEventDescriptionWindow.kEventTypeCountColumnLabel'], **TABLE_HEADER )
                for event_type_info in selected_event_types:
                    try:
                        if KEY_TYPE in event_type_info:
                            event_type_name        = event_type_info[KEY_TYPE]
                            event_type_description = event_type_info[KEY_DESCRIPTION]
                        else:
                            event_type_name        = maya.stringTable['y_profilerEventDescriptionWindow.kEventTypeAnonymous']
                            event_type_description = ''

                        colours = event_type_info[KEY_COLOUR]
                        category_name = event_type_info[KEY_CATEGORY]
                        count = event_type_info[KEY_COUNT]

                        cmds.text( label=event_type_name )
                        cmds.text( label=category_name )
                        cmds.text( label=event_type_description )
                        cmds.text( label='', backgroundColor=colours )
                        cmds.text( label=count )

                    except Exception, ex:
                        print maya.stringTable['y_profilerEventDescriptionWindow.kColourParsingError'].format(ex, event_type_info)

    #----------------------------------------------------------------------
    @staticmethod
    def populate_categories(category_info):
        '''
        Populate the section of the window containing the category information
        :param category_info: List of (category_name, category_description) pairs
        '''
        with LayoutManager( cmds.frameLayout(label=maya.stringTable['y_profilerEventDescriptionWindow.kFrameCategories' ], collapse=True, **FRAME_LAYOUT)):
            with LayoutManager( cmds.rowColumnLayout(numberOfColumns=2 , **RC_LAYOUT_2_COLUMN ) ):
                cmds.text( label=maya.stringTable['y_profilerEventDescriptionWindow.kTypeCategoryNameColumnLabel'], **TABLE_HEADER )
                cmds.text( label=maya.stringTable['y_profilerEventDescriptionWindow.kTypeCategoryDescriptionColumnLabel'], **TABLE_HEADER )
                for (name,description) in sorted(category_info):
                    cmds.text( label=name )
                    cmds.text( label=description )

    #----------------------------------------------------------------------
    def populate(self):
        '''
        This method populates the current window with the framework necessary to
        store the event and category description information.
        '''
        # If the main layout existed then delete the children, otherwise create it.
        # 
        if self.root_layout is not None:
            current_children = cmds.scrollLayout( self.root_layout, childArray=True, query=True )
            if current_children is not None:
                for root_child in current_children:
                    cmds.deleteUI( root_child )
        else:
            self.root_layout = cmds.scrollLayout(childResizable=True)

        # Capture the event type information from selected events
        try:
            selected_event_types = json.loads( cmds.profilerTool( query=True, eventTypes=True ) )[KEY_MAIN]
        except Exception, ex:
            print maya.stringTable['y_profilerEventDescriptionWindow.kProfilerToolMissingEvents'].format(ex)
            selected_event_types = []

        try:
            # Sort by name for convenience
            selected_event_types.sort( key=lambda event: (event.get(KEY_TYPE,None),event[KEY_CATEGORY]) )

            # Capture the category information
            category_data = cmds.profiler( query=True, categoryInfo=True, allCategories=True )
            category_info = [(category_data[i],category_data[i+1]) for i in range(0,len(category_data),2)]
            category_info.sort( key=lambda tup: tup[0] )    # Sort by name for convenience
        except Exception, ex:
            print maya.stringTable['y_profilerEventDescriptionWindow.kProfilerToolMissingCategories'].format(ex)
            category_info = []

        # The main layout within which everything else is populated
        with LayoutManager(self.root_layout):
            # Populate the event type subsection
            self.populate_event_types( selected_event_types )

            # Populate the category subsection
            self.populate_categories( category_info )

    #----------------------------------------------------------------------
    def create(self):
        '''
        This method completely builds the UI, then shows the finished window
        '''
        # Destroy current window if it already exists.
        if cmds.window(self.window_name, exists=True):
            cmds.deleteUI(self.window_name)

        # Create the window.
        cmds.window(self.window_name, closeCommand=self.window_closed, title=self.window_title)
        if self.selection_changed_job is None:
            self.selection_changed_job = cmds.scriptJob( event=["profilerSelectionChanged",self.selection_changed] )

        # Populate the window
        self.populate()

        # Show the window
        cmds.showWindow( self.window_name )
        cmds.window(self.window_name, edit=True)

    #----------------------------------------------------------------------
    def selection_changed(self):
        '''Callback for when the list of selected events in the profiler view changed'''
        if cmds.window(self.window_name, exists=True):
            cmds.setParent( self.window_name )
            self.populate()

    #----------------------------------------------------------------------
    def window_closed(self):
        '''Callback for when the profiler event description window closes'''
        global PROFILER_EVENT_DESCRIPTION_WINDOW_CONTROLLER

        # Shut off the scriptJob listening to selection changes
        if self.selection_changed_job is not None:
            cmds.scriptJob( kill=self.selection_changed_job )

        # Remove the window object
        PROFILER_EVENT_DESCRIPTION_WINDOW_CONTROLLER = None

###############################################################################
#                                                                             #
#  Entry point                                                                #
#                                                                             #
#  This is the method that should be used to launch the window.               #
#                                                                             #
###############################################################################

def create_window():
    """
    This method is the entry point of the Profiler Event Description window.

    It creates the window and brings it up.
    """
    global PROFILER_EVENT_DESCRIPTION_WINDOW_CONTROLLER

    if PROFILER_EVENT_DESCRIPTION_WINDOW_CONTROLLER is None:
        PROFILER_EVENT_DESCRIPTION_WINDOW_CONTROLLER = EventDescriptionWindow()
        PROFILER_EVENT_DESCRIPTION_WINDOW_CONTROLLER.create()

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
