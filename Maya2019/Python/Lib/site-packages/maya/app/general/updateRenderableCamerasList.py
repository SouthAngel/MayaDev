import maya.cmds as cmds
import maya.mel as mel

path = None
camerasList = []
updateFunction = None

class CameraInfo():
    def __init__(self, shapeName, associatedScriptJobNbr):
        self.shapeName = shapeName
        self.associatedScriptJobNbr = associatedScriptJobNbr

def getAddedAndRemovedCameras():
    """ Return 2 iterables, one of the names of the new camera shapes added and
        one of the CameraInfo objects corresponding to the cameras that were
        removed since the last time the list of cameras (camerasList) was
        updated.
    """
    global camerasList

    # Get the list of camera shapes currently in the scene.
    updatedCamerasList = cmds.ls(cameras=True)
    # Get the difference between the old camerasList and the new one, which is
    # the list of added cameras.
    newCameraShapes = (camera for camera in updatedCamerasList if camera not in (cam.shapeName for cam in camerasList))
    # Get the difference between the new camerasList and the old one, which is
    # the list of cameras that were removed since we last updated camerasList.
    cameraToBeRemoved = (camera for camera in camerasList if camera.shapeName not in updatedCamerasList)
    return newCameraShapes, cameraToBeRemoved

def addCameraShapeToCamerasListAndScriptJobsList(cameraShape):
    global updateFunction

    attrName = cameraShape + ".renderable"
    # Add a scriptJob for when the added camera's renderable attribute changes
    # that updates the corresponding window.
    # If the updateFunction variable is a basestring, we assume that it is
    # a mel procedure.
    if isinstance(updateFunction, basestring):
        scriptJob = mel.eval('scriptJob -parent ' + path + ' -attributeChange ' + attrName + ' ' + updateFunction + ';')
    # Otherwise, we assume it is a python function.
    else:
        scriptJob = cmds.scriptJob(parent=path, attributeChange=[attrName, updateFunction])
    # Update the camerasList with the newly added camera.
    camerasList.append(CameraInfo(cameraShape, scriptJob))

def onCameraChangedAddRemoveCameras():
    """ The onCameraChange event is triggered when a camera is added or removed
        from the scene. We must react by updating the list of cameras in the
        current scene and add or kill scriptJobs accordingly.
    """
    global path
    global camerasList

    assert path != None
    assert updateFunction != None

    # Get the cameras that were added and removed since the last time the
    # current function was called.
    newCameraShapes, cameraToBeRemoved = getAddedAndRemovedCameras()
    for cameraShape in newCameraShapes:
        addCameraShapeToCamerasListAndScriptJobsList(cameraShape)
    for camera in cameraToBeRemoved:
        # Kill/remove the scriptJob that was added for that particular camera.
        # This is necessary to avoid duplicating the same scriptJob multiple
        # times.
        cmds.scriptJob(kill=camera.associatedScriptJobNbr, force=True)
        # Update the camerasList accordingly.
        camerasList.remove(camera)

def createCommonRenderCamerasAddBaseCameras(fullPath, updateFunc):
    """ This is called when the createCommonRenderCameras function is called.
        It is mandatory to store the fullPath given as argument as a global
        variable to be used later when scriptJobs are triggered.
    """
    global path
    global camerasList
    global updateFunction

    # Reset the camerasList when the menu of render cameras is initially created
    camerasList = []
    path = fullPath
    updateFunction = updateFunc
    allCameraShapes = cmds.ls(cameras=True)
    for cameraShape in allCameraShapes:
        addCameraShapeToCamerasListAndScriptJobsList(cameraShape)

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
