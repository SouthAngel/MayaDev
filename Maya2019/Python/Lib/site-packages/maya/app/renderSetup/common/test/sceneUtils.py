
"""Utilities for render setup import / export testing."""

import maya.app.renderSetup.model.renderSetup as renderSetup
import maya.app.renderSetup.model.override as override
import maya.app.renderSetup.common.utils as commonUtils

import maya.cmds as cmds

import os

def createBasicRenderSetup():
    """ Create a basic render setup """
    rl1 = renderSetup.instance().createRenderLayer('rl1')
    c1 = rl1.createCollection('c1')
    ov1 = c1.createOverride('ov1', override.RelOverride.kTypeId)
    return (rl1, c1, ov1)

def tmpSubDirName(dir, subDir):
    """ Create a unique sub directory """
    suffix = ''
    while True:
        tmpPath = os.path.join(dir, (subDir + suffix))
        if os.path.exists(tmpPath):
            suffix = '1' if suffix == '' else str(int(suffix) + 1)
        else:
            break

    return tmpPath

def createShader(shaderType):
    """ Create a shader of the given type"""
    shaderName = cmds.shadingNode(shaderType, asShader=True)
    sgName = cmds.sets(renderable=True, noSurfaceShader=True, empty=True, name=(shaderName + "SG"))
    cmds.connectAttr(shaderName + ".outColor", sgName + ".surfaceShader")
    return (shaderName,sgName)

def assignMaterial(shapeName, shadingGroupName):
    cmds.sets(shapeName, forceElement=shadingGroupName)

def getShape(transform):
    """Return the shape of the argument transform."""
    children = cmds.listRelatives(transform, shapes=True)
    return children[0]

class ColorConstants(object):
    def __init__(self):
        # The __init__ should never be used (defined to prevent pylint errors)
        pass

    BLACK = (0.0, 0.0, 0.0)
    WHITE = (1.0, 1.0, 1.0)
    RED   = (1.0, 0.0, 0.0)
    GREEN = (0.0, 1.0, 0.0)
    BLUE  = (0.0, 0.0, 1.0)
    YELLOW= (1.0, 1.0, 0.0)
    PURPLE= (1.0, 0.0, 1.0)

def setColor(attr, color):
    cmds.setAttr(attr, color[0], color[1], color[2], type="float3")

def getShader(shapeName):
    sgName = findShadingGroup(shapeName)
    assert len(sgName) != 0
    shaderName = findSurfaceShader(sgName)
    assert len(shaderName) != 0
    return shaderName

def testShapeColor(shapeName, color):
    shaderName = getShader(shapeName)
    result = cmds.getAttr(shaderName + ".outColor")
    assert result[0] == color

def createShadingGroup(color):
    """ Create a shading group connected to a surface shader of the given color.
        Return the names of both the shading group and its associated shader.
    """
    shaderName, sgName = createShader("surfaceShader")
    setColor(shaderName + ".outColor", color)
    return sgName, shaderName

def findShadingEngine(connections):
    for c in connections:
        nodeName = c.split(".")[0]
        nodeType = cmds.nodeType(nodeName)
        if nodeType == "shadingEngine":
            return nodeName
    return None

def findShadingGroup(shapeName):
    n = commonUtils.nameToDagPath(shapeName).instanceNumber()
    connections = cmds.connectionInfo(shapeName + ".instObjGroups["+str(n)+"]", destinationFromSource=True)
    return findShadingEngine(connections)

def findComplementShadingGroup(shapeName):
    n = commonUtils.nameToDagPath(shapeName).instanceNumber()
    connections = cmds.connectionInfo(shapeName + ".compInstObjGroups["+str(n)+"].compObjectGroups[0]", destinationFromSource=True)
    return findShadingEngine(connections)

def findSurfaceShader(sgName):
    src = cmds.connectionInfo(sgName + ".surfaceShader", sourceFromDestination=True)
    return src.split(".")[0] if len(src) > 0 else ""
# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
