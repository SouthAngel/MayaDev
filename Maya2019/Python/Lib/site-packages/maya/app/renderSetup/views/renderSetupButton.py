from PySide2.QtCore import QSize, QEvent
from PySide2.QtGui import QColor, QIcon, QImage, QPainter, QPixmap, qRgba, qAlpha
from PySide2.QtWidgets import QAbstractButton, QStyle, QStyleOptionButton, QToolTip

import maya.app.renderSetup.views.utils as utils


class RenderSetupButton(QAbstractButton):
    """
    This class represents a render setup button which is an icon button that produces a brighter version of the icon when hovered over.
    """

    # Constants
    DEFAULT_BUTTON_SIZE = utils.dpiScale(20)
    HIGH_LIMIT = 205
    LOW_LIMIT = 30
    MAX_VALUE = 255
    ADJUSTMENT = MAX_VALUE - HIGH_LIMIT

    HIGHLIGHTED = 1
    DISABLED = 0
    
    def __init__(self, parent, icon, size=DEFAULT_BUTTON_SIZE, isEnabled=True):
        super(RenderSetupButton, self).__init__(parent)
        self.size = size
        self.setIcon(icon)
        self.enter = False
        # there is a pixmap to draw for mouseover events
        self.brighterPixmap = None
        # there is a pixmap to draw when the button is disabled
        self.disabledPixmap = None
        self.enabled = isEnabled

    def setEnabled(self, enabled):
        self.enabled = enabled
        self.repaint()

    def isEnabled(self):
        return self.enabled
       
    def enterEvent(self, event):
        self.enter = True
        self.repaint()

    def leaveEvent(self, event):
        self.enter = False
        self.repaint()
        
    def event(self, event):
        if event.type() == QEvent.ToolTip:
            QToolTip.showText(event.globalPos(), self.toolTip())
            return True

        return super(QAbstractButton, self).event(event)

    def createOption(self):
        option = QStyleOptionButton()
        option.initFrom(self)
        if self.isDown():
            option.state = QStyle.State_Sunken
        else:
            option.state = QStyle.State_Raised

        if self.enter:
            option.state = option.state | QStyle.State_MouseOver

        option.icon = self.icon()
        return option

    def paintEvent(self, e):
        """ Draws the render setup button """
        painter = QPainter(self)
        option = self.createOption()
        self.drawControl(QStyle.CE_PushButton, option, painter, self)

    def createPixmap(self, option):
        return option.icon.pixmap(self.size, self.size)

    def drawControl(self, element, option, painter, widget=None):
        """ Draws the icon button """
        pixmap = self.createPixmap(option)
        if not self.isEnabled():
            pixmap = self.getGeneratedIconPixmap(QIcon.Disabled, pixmap, option)
        elif option.state & QStyle.State_MouseOver:
            pixmap = self.getGeneratedIconPixmap(QIcon.Active, pixmap, option)

        painter.drawPixmap(option.rect, pixmap, pixmap.rect())

    def generatePixmapActiveIcon(self, iconMode, pixmap, option):
        if self.brighterPixmap is None:
            self.brighterPixmap = self.generateHighlightedIconPixmap(pixmap)
        return self.brighterPixmap

    def getGeneratedIconPixmap(self, iconMode, pixmap, option):
        """ Draws the icon button brighter when hovered over. """
        if iconMode == QIcon.Normal:
            return pixmap
        elif iconMode == QIcon.Active:
            return self.generatePixmapActiveIcon(iconMode, pixmap, option)
        elif iconMode == QIcon.Disabled:
            if self.disabledPixmap is None:
                self.disabledPixmap = self.generateDisabledIconPixmap(pixmap)
            return self.disabledPixmap

    def generateHighlightedIconPixmap(self, pixmap):
        return self.generateIconPixmap(pixmap, self.HIGHLIGHTED)

    def generateDisabledIconPixmap(self, pixmap):
        return self.generateIconPixmap(pixmap, self.DISABLED)

    # Code taken from QadskDarkStyle.cpp - QadskDarkStyle::generatedIconPixmap
    def generateIconPixmap(self, pixmap, type):
        img = pixmap.toImage().convertToFormat(QImage.Format_ARGB32)
        imgh = img.height()
        imgw = img.width()
        for y in range(0, imgh):
            for x in range(0, imgw):
                pixel = img.pixel(x, y)
                color = QColor(pixel)
                h, s, v, _ = color.getHsv()
                if v > self.LOW_LIMIT:  # value below this limit will not be adjusted
                    if v < self.HIGH_LIMIT:  # value above this limit will just max up to 255
                        v = v + self.ADJUSTMENT if type == self.HIGHLIGHTED else v
                    else:
                        v = self.MAX_VALUE
                color.setHsv(h, s, v)
                alphaChannelScalar = 1.0
                if type == self.DISABLED:
                    alphaChannelScalar = 0.4
                img.setPixel(x, y,
                             qRgba(color.red(), color.green(), color.blue(),
                                   qAlpha(pixel)*alphaChannelScalar))
        return QPixmap.fromImage(img)

    def sizeHint(self):
        return QSize(self.size, self.size)

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
