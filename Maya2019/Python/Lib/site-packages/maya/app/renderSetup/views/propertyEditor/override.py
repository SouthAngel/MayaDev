import maya
maya.utils.loadStringResourcesForModule(__name__)

from maya.app.general.mayaMixin import MayaQWidgetBaseMixin

from PySide2.QtCore import Qt
from PySide2.QtWidgets import QGroupBox, QLabel, QVBoxLayout, QWidget
from shiboken2 import getCppPointer

from maya.app.renderSetup.common.utils import ReportableException
from maya.app.renderSetup.views.propertyEditor.layout import Layout
from maya.app.renderSetup.views.propertyEditor.overridePropertyEditorStrings import *

import maya.app.renderSetup.views.proxy.renderSetupRoles as renderSetupRoles
import maya.app.renderSetup.views.utils as utils

import maya.cmds as cmds

import weakref

# For Maya UI name extraction
import maya.OpenMayaUI as mui

class Override(MayaQWidgetBaseMixin, QGroupBox):
    """
    This class represents the property editor view of an override.
    """
    
    def __init__(self, item, parent):
        super(Override, self).__init__(parent=parent)
        self.path = None
        self.attributeUI = None
        self.item = weakref.ref(item)

        layout = QVBoxLayout()
        layout.setObjectName('override_vertical_box_layout')
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(utils.dpiScale(2))
        self._setupMainOverrideGroupBox(layout)
        
        self.setLayout(layout)

        # Unwrap the layout into a pointer to be able to get the UI name.
        # We use fullName() to ensure a unique name is used
        layoutName = mui.MQtUtil.fullName(long(getCppPointer(layout)[0]))
        cmds.setParent(layoutName)
        
        self._uiLayout = cmds.columnLayout(adjustableColumn=True)

        # attribute when finalized
        self._createAttributeUI(None)
        if item.isUniqueOverride():
            self.target = QLabel(kAppliedToUnique % item.targetNodeName())
            self.target.setAlignment(Qt.AlignBottom | Qt.AlignCenter)
            layout.addWidget(self.target)
        
        # drop box + type attribute text field
        self._setupFinalizationWidget(self.layout())
        
        self.update()
    
    def update(self):
        self.finalizationWidget.setVisible(self.attributeUI is None)

    def _createAttributeUI(self, attrName):
        self.attributeUI = self.item().createAttributeUI(attrName)
    
    def _finalize(self, attr):
        try:
            if not self.item().acceptsDrops(attr):
                cmds.warning(kIncompatibleAttribute % attr)
            else:
                cmds.setParent(self._uiLayout)
                self._createAttributeUI(attr)
                self.update()
        except ReportableException, e:
            cmds.warning(e.text)

    def _setupFinalizationWidget(self, layout):
        # setup parent widget and layout
        self.finalizationWidget, finalizeLayout = QWidget(), QVBoxLayout()
        finalizeLayout.setObjectName('finalization_widget')
        finalizeLayout.setContentsMargins(0, 0, 0, 0)
        finalizeLayout.setSpacing(utils.dpiScale(2))
        self.finalizationWidget.setLayout(finalizeLayout)
        layout.addWidget(self.finalizationWidget)
        cmds.setParent(mui.MQtUtil.fullName(long(getCppPointer(finalizeLayout)[0])))
        
        def dropCb(dragControl, dropControl, messages, x, y, dragType):
            if messages and isinstance(messages[0], basestring):
                self._finalize(messages[0])
        # setup drop box zone
        cmds.iconTextStaticLabel(
            style='iconAndTextVertical',
            i1='RS_drop_box.png',
            label=kDragAttributeFromAE,
            dropCallback=dropCb)
        
        # add separator ("or" type attribute)
        finalizeLayout.addWidget(utils.Separator(maya.stringTable['y_override.kSmallOr' ]))
        
        # setup type attribute label/text field/button
        self.typeAttr = utils.LabelFieldButtonGrp(
            label=maya.stringTable['y_override.kTypeAttribute' ],
            placeholder=maya.stringTable['y_override.kNodeDotAttribute' ],
            tooltip=maya.stringTable['y_override.kTypeAttributeTooltip' ],
            button=maya.stringTable['y_override.kCreate' ])
        self.typeAttr.layout.setContentsMargins(15, 0, 15, 3)
        self.typeAttr.layout.setSpacing(utils.dpiScale(2))
        def create():
            self._finalize(self.typeAttr.field.text())
            return True
        self.typeAttr.field.returnPressed.connect(create)
        self.typeAttr.button.clicked.connect(create)
        finalizeLayout.addWidget(self.typeAttr)
        
        cmds.setParent("..")

    def _setupOverridePathName(self, mainGroupBoxLayout):
        self.path = QLabel(self.item().data(renderSetupRoles.NODE_PATH_NAME))
        mainGroupBoxLayout.addRow(kLayer, self.path)
        
    def _setupMainOverrideGroupBox(self, layout):
        mainGroupBox = QGroupBox()
        mainGroupBox.setContentsMargins(0, 0, 0, 0)
        mainGroupBoxLayout = Layout()
        mainGroupBoxLayout.setVerticalSpacing(utils.dpiScale(2))

        self._setupOverridePathName(mainGroupBoxLayout)

        mainGroupBox.setLayout(mainGroupBoxLayout)
        layout.addWidget(mainGroupBox)

    def paintEvent(self, event):
        if self.item():
            path = self.item().data(renderSetupRoles.NODE_PATH_NAME)
            if self.path.text() != path:
                self.path.setText(path)

        super(Override, self).paintEvent(event)
# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
