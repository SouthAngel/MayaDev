from PySide2.QtGui import QIcon
from PySide2.QtWidgets import QStyle

import maya.app.renderSetup.views.renderSetupButton as renderSetupButton


class RenderSetupCheckableButton(renderSetupButton.RenderSetupButton):
    """
    This class represents a checkable render setup button. This supports
    2 different pixmaps, one for each state (checked/unchecked)
    """

    def __init__(self, parent, icon, size=renderSetupButton.RenderSetupButton.DEFAULT_BUTTON_SIZE, isEnabled=True, isCheckable=False, isChecked=False):
        super(RenderSetupCheckableButton, self).__init__(parent, icon, size)
        # there is an additional pixmap to draw for the checked state
        self.brighterPixmapChecked = None
        self.enabled = isEnabled
        self.checkable = isCheckable
        self.checked = isChecked

    def setCheckable(self, isCheckable):
        self.checkable = isCheckable

    def isCheckable(self):
        return self.checkable and self.enabled

    def setChecked(self, checked):
        if self.isCheckable():
            self.checked = checked
            self.repaint()

    def isChecked(self):
        if not self.checkable:
            return False
        return self.checked

    def createOption(self):
        option = super(RenderSetupCheckableButton, self).createOption()

        # The augmented behavior from the base class is that we should keep
        # track of whether the option is checked.
        if not self.isCheckable() or not self.isChecked():
            option.checked = QStyle.State_Off
        else:
            option.checked = QStyle.State_On

        return option

    def createPixmap(self, option):
        # We have to choose the proper pixmap depending on the state of the
        # button (checked/unchecked)
        if option.checked == QStyle.State_On:
            return option.icon.pixmap(self.size, self.size, state=QIcon.On)
        else:
            return option.icon.pixmap(self.size, self.size, state=QIcon.Off)

    def generatePixmapActiveIcon(self, iconMode, pixmap, option):
        # There are 2 brighter pixmaps to draw in this derived class, the
        # additional one is for when the button is checked.
        if option.checked == QStyle.State_Off:
            if self.brighterPixmap is None:
                self.brighterPixmap = self.generateHighlightedIconPixmap(pixmap)
            return self.brighterPixmap
        else:
            if self.brighterPixmapChecked is None:
                self.brighterPixmapChecked = self.generateHighlightedIconPixmap(pixmap)
            return self.brighterPixmapChecked

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
