"""
    The file must contain all user preferences related to the Render Setup
"""

import maya.cmds as cmds
import os
import json

import maya.app.renderSetup.model.renderSetup as renderSetupModel
import maya.app.renderSetup.model.renderSetupPreferences as prefs
import maya.app.renderSetup.model.renderSettings as renderSettings
import maya.app.renderSetup.model.aovs as aovs
import maya.app.renderSetup.model.jsonTranslatorGlobals as jsonTranslatorGlobals

from maya.app.renderSetup.model.renderSetupPresetsModelStrings import * 

# Locate a preset file by name.
# Location:
#    - First use the provided path (as an absolute path) if it exists
#    - Second look in the user preset directory
#    - Third look in the global preset directory
def resolvePresetFile(fileName):
    if os.path.dirname(fileName) is None or os.path.dirname(fileName) == "":
        # Get an absolute path from our relative one, does the file exist?
        resolvedPath = os.path.realpath(fileName)
        if os.path.exists(resolvedPath):
            return resolvedPath
        # Is the path in our user presets directory?
        userPresetsDir = prefs.getUserPresetsDirectory()
        if userPresetsDir and os.path.exists(userPresetsDir):
            resolvedPath = os.path.join(userPresetsDir, fileName)
            if os.path.exists(resolvedPath):
                return resolvedPath
        # Is the path in our global presets directory?
        globalPresetsDir = prefs.getGlobalPresetsDirectory()
        if globalPresetsDir and os.path.exists(globalPresetsDir):
            resolvedPath = os.path.join(globalPresetsDir, fileName)
            if os.path.exists(resolvedPath):
                return resolvedPath
    return fileName

# Locate a template file by name.
# Location:
#    - First use the provided path (as an absolute path) if it exists
#    - Second look in the user template directory
#    - Third look in the global template directory
def resolveTemplateFile(fileName):
    if os.path.dirname(fileName) is None or os.path.dirname(fileName) == "":
        # Get an absolute path from our relative one, does the file exist?
        resolvedPath = os.path.realpath(fileName)
        if os.path.exists(resolvedPath):
            return resolvedPath
        # Is the path in our user template directory?
        userTemplateDir = prefs.getUserTemplateDirectory()
        if userTemplateDir and os.path.exists(userTemplateDir):
            resolvedPath = os.path.join(userTemplateDir, fileName)
            if os.path.exists(resolvedPath):
                return resolvedPath
        # Is the path in our global template directory?
        globalTemplateDir = prefs.getGlobalTemplateDirectory()
        if globalTemplateDir and os.path.exists(globalTemplateDir):
            resolvedPath = os.path.join(globalTemplateDir, fileName)
            if os.path.exists(resolvedPath):
                return resolvedPath
    return fileName

# Load a render settings preset file from disk. Resolve the path if needed.
# This method can be called when batch rendering from the command line using the "-rsp" flag.
def loadPreset(fileName):
    resolvedFile = resolvePresetFile(fileName)
    try:
        with open(resolvedFile) as file:
            renderSettings.decode(json.load(file))
    except IOError:
        cmds.error(kPresetFileNotFound % resolvedFile)
    except:
        cmds.error(kInvalidPresetFound % resolvedFile)

# Load an AOV preset file from disk.   Resolve the path if needed.
# This method can be called when batch rendering from the command line using the "-rsa" flag.
def loadAOVs(fileName):
    resolvedFile = resolvePresetFile(fileName)
    try:
        with open(resolvedFile) as file:
            aovs.decode(json.load(file), jsonTranslatorGlobals.DECODE_AND_ADD)
    except IOError:
        cmds.error(kPresetFileNotFound % resolvedFile)
    except:
        cmds.error(kInvalidPresetFound % resolvedFile)

# Load a template file from disk.  Resolve the path if needed.
# This method can be called when batch rendering from the command line using the "-rst" flag.
def loadTemplate(fileName):
    resolvedFile = resolveTemplateFile(fileName)
    try:
        with open(resolvedFile) as file:
            renderSetupModel.instance().decode(json.load(file), jsonTranslatorGlobals.DECODE_AND_ADD, "")
    except IOError:
        cmds.error(kTemplateFileNotFound % resolvedFile)
    except:
        cmds.error(kInvalidTemplateFound % resolvedFile)
# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
