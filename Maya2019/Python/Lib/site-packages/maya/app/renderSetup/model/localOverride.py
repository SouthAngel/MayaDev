import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
This module encapsulates the local override enabled state.
Applied enabled (selfEnabled) local overrides should not report being enabled in batch mode or on export.
'''

import maya.api.OpenMaya as OpenMaya
import maya.cmds as cmds
import maya.app.renderSetup.model.utils as utils

global _localOverrideEnabled
_localOverrideEnabled = True

def enabled():
    global _localOverrideEnabled
    return not cmds.about(batch=True) and not ExportListener.instance().isExporting() and _localOverrideEnabled 

def _toggle(ovrs):
    for ov in ovrs:
        ov.setSelfEnabled(False)
        ov.setSelfEnabled(True)

def _setLocalOverrideEnabled(newEnabled):
    global _localOverrideEnabled
    prevEnabled = enabled()
    _localOverrideEnabled = newEnabled
    if prevEnabled != enabled():
        import maya.app.renderSetup.model.renderSetup as renderSetup
        rs = renderSetup.instance()
        # toggle all local overrides
        _toggle(filter(lambda ov: ov.isLocalRender() and ov.isSelfEnabled() and ov.parent().isEnabled(), utils.getOverridesRecursive(rs)))

class RenderSetupLocalOverrideCmd(OpenMaya.MPxCommand):
    kCmdName = "renderSetupLocalOverride"
    kStateFlag = "-st"
    kStateFlagLong = "-state"
 
    @staticmethod
    def creator():
        return RenderSetupLocalOverrideCmd()

    @staticmethod
    def createSyntax():
        syntax = OpenMaya.MSyntax()
        syntax.enableQuery = True
        syntax.addFlag(RenderSetupLocalOverrideCmd.kStateFlag, RenderSetupLocalOverrideCmd.kStateFlagLong, OpenMaya.MSyntax.kBoolean)
        return syntax

    def isUndoable(self):
        return False

    def doIt(self, args):
        try:
            argDb = OpenMaya.MArgDatabase(self.syntax(), args)
        except RuntimeError as e:
            errorMsg = maya.stringTable['y_localOverride.kRenderSetupLocalOverrideCmdParsingError' ] + e.message
            OpenMaya.MGlobal.displayError(errorMsg)
            raise RuntimeError(errorMsg)
        
        if argDb.isQuery:
            self.setResult(enabled())
        elif argDb.isFlagSet(RenderSetupLocalOverrideCmd.kStateFlag):
            newEnabled = argDb.flagArgumentBool(RenderSetupLocalOverrideCmd.kStateFlag, 0)
            _setLocalOverrideEnabled(newEnabled)
        else:
            errorMsg = maya.stringTable['y_localOverride.kRenderSetupLocalOverrideCmdInvalidUsage' ]
            OpenMaya.MGlobal.displayError(errorMsg)
            raise RuntimeError(errorMsg)

class LocalOverrideGuard(object):
    def __init__(self, newEnabled):
        super(LocalOverrideGuard, self).__init__()
        self.newEnabled = newEnabled
        self.previous = None

    def __enter__(self):
        self.previous = enabled()
        _setLocalOverrideEnabled(self.newEnabled)

    def __exit__(self, type, value, traceback):
        _setLocalOverrideEnabled(self.previous)

def localOverrideEnabled(newEnabled):
    def decorator(f):
        def localOverrideEnabledWrapper(*args, **kwargs):
            with LocalOverrideGuard(newEnabled):
                return f(*args, **kwargs)
        return localOverrideEnabledWrapper
    return decorator

class ExportListener(object):
    '''
    This instance listen for export callbacks (before/after).
    Ensures that all calls to ov.isEnabled() for every applied local override
    will return false during export time.
    '''
    # This is a workaround to fake batch mode in non batch mode...
    # This listener will toggle override.selfEnabled for all applied enabled local override
    # this will force enabled plug to be pulled (since it's dirty) and will henceforth return
    # false during export time (see enabled() function below).
    # The selfEnabled attribute is toggled back after export to dirty enabled again and will 
    # then return true next time it is queried.
    
    _instance = None
    
    @staticmethod
    def instance():
        if ExportListener._instance is None:
            import maya.app.renderSetup.model.renderSetup as renderSetup
            assert renderSetup.hasInstance(), "Should not create an ExportListener instance without Render Setup instance."
            ExportListener._instance = ExportListener()
        return ExportListener._instance
    
    @staticmethod
    def deleteInstance():
        if ExportListener._instance is not None:
            for id in ExportListener._instance._cbIds:
                OpenMaya.MMessage.removeCallback(id)
        ExportListener._instance = None
    
    def __init__(self):
        callbacks = { OpenMaya.MSceneMessage.kBeforeExport : self._beforeExport,
                      OpenMaya.MSceneMessage.kAfterExport  : self._afterExport }
        self._cbIds = [ OpenMaya.MSceneMessage.addCallback(type, callback) \
            for type,callback in callbacks.iteritems() ]
        self.prevEnabled = None
        self._exporting = False
        
    def _beforeExport(self, clientData):
        self.prevEnabled = enabled()
        _setLocalOverrideEnabled(False)
        self._exporting = True
    
    def _afterExport(self, clientData):
        self._exporting = False
        _setLocalOverrideEnabled(self.prevEnabled)

    def isExporting(self):
        return self._exporting
# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
