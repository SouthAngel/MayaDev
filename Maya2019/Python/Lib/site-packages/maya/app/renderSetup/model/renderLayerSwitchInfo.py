""" Singleton for Render Layer switch observation

    This module is used to notify of progress during layer switching, which
    can be a lengthy operation.
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


import maya.app.renderSetup.model.progressObservable as progressObs
import maya.app.renderSetup.model.utils as utils

import maya.app.renderSetup.common.utils as commonUtils

kApplyLayer = maya.stringTable['y_renderLayerSwitchInfo.kApplyLayer' ]
kUnapplyLayer = maya.stringTable['y_renderLayerSwitchInfo.kUnapplyLayer' ]
kApplyOverride = maya.stringTable['y_renderLayerSwitchInfo.kApplyOverride' ]
kUnapplyOverride = maya.stringTable['y_renderLayerSwitchInfo.kUnapplyOverride' ]
kReadResolveConflicts = maya.stringTable['y_renderLayerSwitchInfo.kReadResolveConflicts' ]
kImporting = maya.stringTable['y_renderLayerSwitchInfo.kImported' ]
kReferencing = maya.stringTable['y_renderLayerSwitchInfo.kReferenced' ]

IMPORT = 0
REFERENCE = 1

class RenderLayerSwitchInfo(object):
    """ Gets information on layer switch operations.
        Keeps track of the layer switch progress by estimating the number
        of apply overrides that could possibly need applying/unapplying.
        When a layer switch operation is in progress, we frequently update the
        ProgressObservable with the current information."""
    __metaclass__ = commonUtils.SingletonMetaClass

    def __init__(self):
        super(RenderLayerSwitchInfo, self).__init__()
        self.numerator, self.denominator = 0.0, 1.0
        self.subnumerator, self.subdenominator = 0.0, 1.0
        self.applying = False
        self.layer = None
        self.ovr = None
        self.textImportRef = None
    
    def progress(self):
        # Returns the current progress of the switching process in range 0-1.'''
        # The progress is divided in N blocks of variying subsizes M_i
        # where N = the number of overrides in the layer
        # M_i = the number of elements in the collection containing the ith override
        # => progress is not uniform but is continuous
        return (self.numerator + (self.subnumerator/self.subdenominator)) / self.denominator
    
    def info(self):
        ''' Returns information about the current operation being
            computed during the layer switch.
        '''
        if self.textImportRef is None:
            text = kApplyLayer % self.layer if self.layer else kUnapplyLayer
            if self.ovr:
                text += (kApplyOverride if self.applying else kUnapplyOverride) % self.ovr
        else:
            text = self.textImportRef
        return text

    def update(self):
        """ Update the ProgressObservable (the subject) with
            the new information of where the progress is at.
            This includes the percentage of progress estimated to be done and
            the information related to the current operation being computed.
        """
        if progressObs.ProgressObservable().inProgress:
            progressObs.ProgressObservable().notifyItemObserver(self.progress(), self.info())

    def _init(self, layer, denominator, currentOpInfo=None):
        if currentOpInfo:
            self.textImportRef = kReadResolveConflicts % currentOpInfo
        else:
            self.textImportRef = None
        self.numerator, self.denominator = (0.0, denominator) if denominator > 0 else (1.0, 2.0)
        self.numerator, self.denominator = (0.0, denominator) if denominator > 0 else (1.0, 2.0)
        self.subnumerator, self.subdenominator = 0.0, 1.0
        self.layer = layer.name() if layer else None
        progressObs.ProgressObservable().startProgress()
    
    def _end(self):
        self.subnumerator = 0.0
        self.numerator = self.denominator
        progressObs.ProgressObservable().endProgress()
        self.textImportRef = None
    
    def _subinit(self, ovr, applying, subdenominator):
        self.subdenominator = subdenominator if subdenominator > 0 else 1.0
        self.ovr = ovr.name()
        self.applying = applying
        self.update()
    
    def _subend(self):
        self.subnumerator = 0.0
        self.numerator += 1.0
        self.ovr = None
        self.update()
    
    def _tick(self):
        self.subnumerator += 1.0
        self.update()


## Decorators to help keeping track of layer switch progress

class _Context(object):
    def __enter__(self):
        pass
    def __exit__(self, type, value, traceback):
        pass

class SwitchLayerContext(_Context):
    def __init__(self, oldLayer, newLayer):
        self.oldLayer, self.newLayer = oldLayer, newLayer
    
    def __enter__(self):
        n = len(list(utils.getOverridesRecursive(self.oldLayer))) + len(list(utils.getOverridesRecursive(self.newLayer)))
        RenderLayerSwitchInfo()._init(self.newLayer, n)
    
    def __exit__(self, type, value, traceback):
        RenderLayerSwitchInfo()._end()

class ApplyOverrideContext(_Context):
    def __init__(self, ovr):
        self.ovr = ovr
    
    def __enter__(self):
        collection = self.ovr.parent()
        # overrides may not have a collection parent only in tests and right after
        # importing and referencing, before we clean up the scene
        n = len(collection.getSelector().names()) if collection is not None else 1.0
        RenderLayerSwitchInfo()._subinit(self.ovr, True, n)
    
    def __exit__(self, type, value, traceback):
        RenderLayerSwitchInfo()._subend()

class ApplyApplyOverrideContext(_Context):
    def __exit__(self, type, value, traceback):
        RenderLayerSwitchInfo()._tick()

class UnapplyOverrideContext(_Context):
    def __init__(self, ovr):
        self.ovr = ovr
    
    def __enter__(self):
        RenderLayerSwitchInfo()._subinit(self.ovr, False, len(self.ovr.getApplyOverrides()))
    
    def __exit__(self, type, value, traceback):
        RenderLayerSwitchInfo()._subend()

class UnapplyApplyOverrideContext(_Context):
    def __exit__(self, type, value, traceback):
        RenderLayerSwitchInfo()._tick()

class UnapplyLayerImportRefContext(_Context):
    def __init__(self, oldLayer, data=None):
        self.oldLayer = oldLayer
        self.inProgress = False
        if data == IMPORT:
            self.currentOpInfo = kImporting
        elif data == REFERENCE:
            self.currentOpInfo = kReferencing
        else:
            self.currentOpInfo = None

    def __enter__(self):
        if self.currentOpInfo:
            n = len(list(utils.getOverridesRecursive(self.oldLayer)))
            if n > 0:
                RenderLayerSwitchInfo()._init(None, n, self.currentOpInfo)
                self.inProgress = True

    def __exit__(self, type, value, traceback):
        if self.inProgress:
            RenderLayerSwitchInfo()._end()
            self.inProgress = False

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
