""" 
    AOV information is encoded and decoded by 3rdParty renderers. These renderers
    register AOV callbacks by deriving from or implementing an interface identical
    to the AOVCallbacks interface located in the rendererCallbacks module. This
    class is then registered by calling:
    
    rendererCallbacks.registerCallbacks(rendererName, 
                                        rendererCallbacks.CALLBACKS_TYPE_AOVS
                                        callbacksClassImplementation)
    
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


import maya.cmds as cmds

import maya.api.OpenMaya as OpenMaya
import maya.app.renderSetup.model.rendererCallbacks as rendererCallbacks
import maya.app.renderSetup.model.renderSetup as renderSetup
import maya.app.renderSetup.model.utils as utils
import maya.app.renderSetup.common.utils as commonUtils


# Errors
kRendererMismatch   = maya.stringTable['y_aovs.kRendererMismatch' ]
kImportWrongRSFile        = maya.stringTable['y_aovs.kImportWrongRSFile'       ]

def _getCurrentRenderer():
    return cmds.getAttr('defaultRenderGlobals.currentRenderer')

def getAllAOVNodesInScene():
    ''' Return a generator of all AOV nodes in the scene using their names '''

    callbacks = rendererCallbacks.getCallbacks(rendererCallbacks.CALLBACKS_TYPE_AOVS)

    # First, get all aov node types of the current renderer
    aovNodeTypes = callbacks.aovNodeTypes() if callbacks is not None else []
    # Secondly, access all the names of AOV nodes of every type found
    for aovNodeType in aovNodeTypes:
        for aovNodeName in (cmds.ls(type=aovNodeType) or []):
            # Thirdly, yield the aov nodes from their names
            yield commonUtils.nameToNode(aovNodeName)

def sceneHasAOVsApplyOverrides():
    return utils.sceneHasApplyOverridesOnAGivenNodeType(getAllAOVNodesInScene)

def encodeMasterValues():
    ''' Encode the master values of the attributes related to the AOVS
        of a specific renderer '''
    return encode(wantMasterValues=True)

def encode(wantMasterValues=False):
    ''' Encode all the attribute values related to the AOVs of a specific renderer '''

    def encodeAOVs():
        encodedData = aovsCallbacks.encode()
        # Encapsulate with the renderer name
        aovsData = {}
        currentRenderer = _getCurrentRenderer()
        aovsData[currentRenderer] = encodedData
        return aovsData

    try:
        aovsCallbacks = rendererCallbacks.getCallbacks(rendererCallbacks.CALLBACKS_TYPE_AOVS)
        if aovsCallbacks is not None:
            if wantMasterValues:
                with utils.EncodeMasterValuesCtxMgr(getAllAOVNodesInScene):
                    return encodeAOVs()
            else:
                return encodeAOVs()
    except Exception as ex:
        # Control any user mistake to avoid a complete failure of the encode
        OpenMaya.MGlobal.displayError('aovs.encode() - %s' % (str(ex)))
    return dict()

def decode(aovsData, decodeType):
    ''' Decode and apply all the attribute values related to the AOVs of a specific renderer '''

    currentRenderer = _getCurrentRenderer()

    # Check if the renderer is the currently selected one 
    data = {}
    try:
        data = aovsData[currentRenderer]
    except:
        raise RuntimeError(kRendererMismatch % (currentRenderer, aovsData.keys()[0]))

    try:
        aovsCallbacks = rendererCallbacks.getCallbacks(rendererCallbacks.CALLBACKS_TYPE_AOVS)
        if not aovsCallbacks is None:
            aovsCallbacks.decode(data, decodeType)
    except Exception:
        # Control any user mistake to avoid a complete failure of the decode
        OpenMaya.MGlobal.displayError(kImportWrongRSFile)
        return 

    # MAYA-88215: If import has not failed, then the layer needs to be refreshed
    # (we do not impose the layer refresh, user decides when it's done)
    if renderSetup.hasInstance():
        rs = renderSetup.instance()
        if not rs.getDefaultRenderLayer().isVisible():
            rs.getVisibleRenderLayer().needsApplyUpdate = True# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
