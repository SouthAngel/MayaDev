"""Utilities to implement hierarchical enabling of overrides and collections.

   Render setup overrides and collections can be enabled and disabled.

   Disabling an override removes its effect, but keeps the override itself.

   Disabling a collection disables all the overrides in its list, as well
   as disabling any child (nested) collection it may have.

   To implement this behavior, overrides and collections have three
   attributes:

   1) An enabled attribute.  This attribute is readable only (output), and
      is (trivially) computed from the two following attributes.
   2) A self enabled attribute.  This writable attribute determines whether
      the override or collection itself is enabled.
   3) A parent enabled attribute.  This writable attribute is connected to
      its parent's enabled output attribute, unless it is a collection
      immediately under a render layer.

   The enabled output boolean value is the logical and of the self enabled
   attribute and the parent enabled attribute."""

import maya.api.OpenMaya as OpenMaya

def createBoolAttribute(longName, shortName, defaultValue):
    """ Helper method to create an input (writable) boolean attribute """

    attrFn = OpenMaya.MFnNumericAttribute()
    attr = attrFn.create(
        longName, shortName, OpenMaya.MFnNumericData.kBoolean, defaultValue)
    attrFn.writable = True
    attrFn.storable = True
    attrFn.keyable  = False

    return attr

def createIntAttribute(longName, shortName, defaultValue):
    """ Helper method to create an input (writable) int attribute """

    attrFn = OpenMaya.MFnNumericAttribute()
    attr = attrFn.create(
        longName, shortName, OpenMaya.MFnNumericData.kInt, defaultValue)
    attrFn.writable = True
    attrFn.storable = True
    attrFn.keyable  = False

    return attr
    
def createBoolOutputAttribute(longName, shortName, defaultValue):
    """ Helper method to create an output (readable) boolean attribute """

    attrFn = OpenMaya.MFnNumericAttribute()
    attr = attrFn.create(
        longName, shortName, OpenMaya.MFnNumericData.kBoolean, defaultValue)
    attrFn.readable = True
    attrFn.writable = False
    attrFn.storable = False
    return attr

def createHiddenIntAttribute(longName, shortName):
    """Helper method to create a hidden, readable, non-keyable, and
    writable integer attribute."""

    numAttrFn = OpenMaya.MFnNumericAttribute() 
    attr = numAttrFn.create(longName, shortName, OpenMaya.MFnNumericData.kInt, 0)
    numAttrFn.storable = True
    numAttrFn.keyable = False
    numAttrFn.readable = True
    numAttrFn.writable = True
    numAttrFn.hidden = True
    return attr

def createNumIsolatedChildrenAttribute():
    """Helper method to create the number of isolated children attribute.

    This renderLayer and collection attribute is a count of the number
    of isolate selected children in the subtree of the render layer
    or collection."""

    return createHiddenIntAttribute("numIsolatedChildren", "nic")

def initializeAttributes(cls):

    cls.selfEnabled = createBoolAttribute('selfEnabled', 'sen', 1)
    cls.addAttribute(cls.selfEnabled)

    cls.parentEnabled = createBoolAttribute('parentEnabled', 'pen', 1)
    cls.addAttribute(cls.parentEnabled)

    # NOTE: this function is called by override classes, and therefore adds
    # a "parentNumIsolatedChildren" attribute to them.  This attribute is
    # unused by overrides, so the addition is undesirable (but harmless)
    # for overrides.  Keeping attribute for overrides to avoid backward
    # compatibility issues.  PPT, 25-Apr-2016
    #
    # Keeping attribute name identical to 2016_R2, to avoid backward
    # compatibility issues.  PPT, 22-Apr-2016.
    cls.layerNumIsolatedChildren = createIntAttribute('parentNumIsolatedChildren', 'pic', 0)
    cls.addAttribute(cls.layerNumIsolatedChildren)
    
    # Add the enabled output attribute.
    cls.enabled = createBoolOutputAttribute('enabled', 'en', 1)
    cls.addAttribute(cls.enabled)
    
    # Add dependencies
    cls.attributeAffects(cls.selfEnabled, cls.enabled)
    cls.attributeAffects(cls.parentEnabled, cls.enabled)
    cls.attributeAffects(cls.layerNumIsolatedChildren, cls.enabled)

def computeEnabled(node, dataBlock):
    '''Returns the enabled state based on the basic conditions (selfEnabled and parentEnabled).'''

    return dataBlock.inputValue(node.selfEnabled).asBool() and \
           dataBlock.inputValue(node.parentEnabled).asBool()
    
def compute(node, plug, dataBlock):
    '''
    Computes the enabled plug with the basic conditions (selfEnabled and parentEnabled).
    Do not use if 'enabled' depends on other attributes.
    '''
    if (plug == node.enabled):
        setEnabledOutput(node, dataBlock, computeEnabled(node, dataBlock))
        # The plug was successfully computed
        return node

    # Let the Maya parent class compute the plug
    return None

def setEnabledOutput(node, dataBlock, value):
    outHandle = dataBlock.outputValue(node.enabled)
    outHandle.setBool(value)
    dataBlock.setClean(node.enabled)


# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
