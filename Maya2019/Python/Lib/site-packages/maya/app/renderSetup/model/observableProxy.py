'''
Proxy observable for application notification.

This module defines proxy observables for receiving notifications from
Maya.  The proxy observables have an observer reference count that is used
to attach to the Maya notification when greater than zero, and detach from
the Maya notification when the reference count falls to zero.

In this way, no time is spent processing Maya notifications when no
observers are listening.
'''

from maya.app.renderSetup.model.observable import Observable

import maya.api.OpenMaya as OpenMaya

import logging

logger = logging.getLogger(__name__)

class ObservableProxy(Observable):
    '''Base proxy observable class.

    This class provides a no-op implementation of activate() and deactivate().
    '''

    def __del__(self):
        self.deactivate()

    def activate(self):
        pass
            
    def deactivate(self):
        pass


class ObservableDGProxy(ObservableProxy):
    '''Proxy observable class for DG callbacks.'''

    def __init__(self, cbName, cb=None, cbArgs=None):
        super(ObservableDGProxy, self).__init__()
        self._cbName        = cbName # For debugging
        self._observerCount = 0
        self._cb            = cb
        self._cbArgs        = cbArgs
        self._cbId          = None

    def addItemObserver(self, obs):
        super(ObservableDGProxy, self).addItemObserver(obs)
        self._observerCount += 1
        self.activate()

    def removeItemObserver(self, obs):
        super(ObservableDGProxy, self).removeItemObserver(obs)
        self._observerCount -= 1
        if self._observerCount == 0:
            self.deactivate()

    def activate(self):
        if self._cbId is None and self._observerCount == 1:
            logger.debug('Adding Maya callback for %s', self._cbName)
            self._cbId = self._cb(*self._cbArgs)
            
    def deactivate(self):
        if self._cbId is not None:
            logger.debug('Removing Maya callback for %s', self._cbName)
            OpenMaya.MMessage.removeCallback(self._cbId)
            self._cbId = None


class ObservableDagProxy(ObservableDGProxy):
    '''Proxy observable class for DAG callbacks.'''

    def __init__(self, cbName, dagCbTypes, cb):
        super(ObservableDagProxy, self).__init__(cbName)
        self._dagCbTypes = dagCbTypes
        self._cb         = cb
        self._cbIds      = None

    def activate(self):
        if self._cbIds is None and self._observerCount == 1:
            logger.debug('Adding Maya callback for %s', self._cbName)
            self._cbIds = []
            for type in self._dagCbTypes:
                self._cbIds.append(OpenMaya.MDagMessage.addDagCallback(
                    type, self._cb))
            
    def deactivate(self):
        if self._cbIds is not None:
            logger.debug('Removing Maya callback for %s', self._cbName)
            for cb in self._cbIds:
                OpenMaya.MMessage.removeCallback(cb)
            self._cbIds = None
# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
