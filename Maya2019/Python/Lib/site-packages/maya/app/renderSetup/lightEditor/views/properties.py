import maya
maya.utils.loadStringResourcesForModule(__name__)

from maya.app.general.mayaMixin import MayaQWidgetBaseMixin

from PySide2.QtWidgets import QGroupBox, QVBoxLayout

from shiboken2 import getCppPointer

from maya.app.renderSetup.views.propertyEditor.layout import Layout
import maya.app.renderSetup.views.utils as utils
import maya.app.renderSetup.model.utils as modelUtils
import maya.app.renderSetup.common.utils as commonUtils
import maya.app.renderSetup.model.plug as plug
import maya.app.renderSetup.model.applyOverride as applyOverride
import maya.app.renderSetup.lightEditor.model.typeManager as typeMgr


import maya.OpenMayaUI as OpenMayaUI
import maya.cmds as cmds
import weakref



kEnable = maya.stringTable['y_properties.kEnable' ]
kIsolate = maya.stringTable['y_properties.kIsolate' ]

def _createControl(plg, attrLabel, connectable=True, enabled=True):
    """ Create a UI control for the given attribute, 
    matching its type and considering if it's connectable."""

    attr = plg.name
    hideButton = not (connectable and plg.isConnectable)
    ctrl = None

    # Vectors must be handled explicitly with attrFieldGrp. If the more general attrControlGrp is used
    # no map button is created. This is a bug with the attrControlGrp command and vector types.
    if plg.isVector:
        ctrl = cmds.attrFieldGrp(attribute=attr, label=attrLabel, enable=enabled, forceAddMapButton=not hideButton, hideMapButton=hideButton, preventOverride=True, precision=3)

    # Bools must also be handled explicitly. The general command attrControlGrp gives error messages
    # when creating a bool control.
    elif plg.type is plug.Plug.kBool:
        ctrl = cmds.checkBoxGrp(label=attrLabel, enable=enabled, numberOfCheckBoxes=1, preventOverride=True)
        cmds.connectControl(ctrl, attr, index=2)
        
    # Floats must be handled separately to set their precision
    elif plg.type is plug.Plug.kFloat or plg.type is plug.Plug.kDouble:
        ctrl = cmds.attrFieldSliderGrp(attribute=attr, label=attrLabel, enable=enabled, annotation=attr, forceAddMapButton=not hideButton, hideMapButton=hideButton, preventOverride=True, precision=3)

    # Strings must also be handled explicitly. The general command attrControlGrp gives error messages
    # when creating a string control.
    elif plg.type is plug.Plug.kString:
        ctrl = cmds.textFieldGrp(label=attrLabel, enable=enabled, preventOverride=True)
        cmds.connectControl(ctrl, attr, index=2)
    elif plg.type is plug.Plug.kFilename:
        cmds.rowLayout(numberOfColumns=2)
        ctrl = cmds.textFieldGrp(label=attrLabel, enable=enabled, preventOverride=True, fileName=True)
        cmds.connectControl(ctrl, attr, index=2, fileName=True)
        cmds.symbolButton(image='navButtonBrowse.png', command=lambda data: utils.browse(attr))
        cmds.setParent('..') # rowLayout

    # Handled all other types with attrControlGrp, if supported
    elif cmds.attrControlGrp(query=True, handlesAttribute=attr):
        ctrl = cmds.attrControlGrp(attribute=attr, label=attrLabel, enable=enabled, hideMapButton=hideButton, preventOverride=True)

    # If no control was created above, fallback to a navigation control group,
    # so that connections can be made on the attribute.
    if ctrl is None:
        ctrl = cmds.attrNavigationControlGrp(label=attrLabel, attribute=attr, enable=enabled,
                createNew="connectionOverrideNewNode " + attr, connectToExisting="connectionOverrideReplaceNode " + attr)

    return ctrl

class LightProperties(MayaQWidgetBaseMixin, QGroupBox):
    """
    This class represents the property editor view of a light editor light item.
    """

    def __init__(self, item, parent):
        super(LightProperties, self).__init__(parent=parent)
        self.item = weakref.ref(item)

        layout = QVBoxLayout()
        layout.setObjectName('light_editor_light_vertical_box_layout')
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(utils.dpiScale(2))

        self._setupMainGroupBox(layout)
        self.setLayout(layout)

        # Unwrap the layout into a pointer to be able to get the UI name.
        # We use fullName() to ensure a unique name is used
        layoutName = OpenMayaUI.MQtUtil.fullName(long(getCppPointer(layout)[0]))
        cmds.setParent(layoutName)

        self._uiLayout = cmds.columnLayout(adjustableColumn=True)
        self._createAttributeControls()

    def _setupMainGroupBox(self, layout):
        mainGroupBox = QGroupBox()
        mainGroupBox.setContentsMargins(0, 0, 0, 0)
        mainGroupBoxLayout = Layout()
        mainGroupBoxLayout.setVerticalSpacing(utils.dpiScale(2))
        mainGroupBox.setLayout(mainGroupBoxLayout)
        layout.addWidget(mainGroupBox)

    def _createAttributeControls(self):
        # Removing isolate/enabled from the light properties as per MAYA-84588
        # ctrl = cmds.checkBoxGrp(label=_NOL10N(""), numberOfCheckBoxes=2, labelArray2=[kEnable, kIsolate], preventOverride=True)
        # cmds.connectControl(ctrl, self.item().model.name() + _NOL10N(".selfEnabled"), index=2)
        # cmds.connectControl(ctrl, self.item().model.name() + _NOL10N(".isolateSelected"), index=3)

        seperatorAdded = False
        for column in range(0, len(typeMgr.getAllAttributes())):
            plg = self.item().model.getAttrPlug(column)
            if plg:
                attrLabel, _ = typeMgr.getAllAttributes().items()[column]

                # Check if a relative override is applied
                src = modelUtils.plugSrc(plg.plug)
                if src and commonUtils.isNodeInstance(src.node(), applyOverride.ApplyRelOverride):
                    enabledPlg = plug.findPlug(src.node(), "enabled")
                    src = modelUtils.plugSrc(enabledPlg.plug)
                    multiplyPlg = plug.findPlug(src.node(), "multiply")
                    offsetPlg = plug.findPlug(src.node(), "offset")

                    if not seperatorAdded:
                        cmds.separator()
                    _createControl(plg, attrLabel)
                    _createControl(multiplyPlg, maya.stringTable['y_properties.kMultiply' ])
                    _createControl(offsetPlg, maya.stringTable['y_properties.kOffset' ])
                    cmds.separator()
                    seperatorAdded = True
                else:
                    _createControl(plg, attrLabel)
                    seperatorAdded = False

class GroupProperties(MayaQWidgetBaseMixin, QGroupBox):
    """
    This class represents the property editor view of a light editor group item.
    """

    def __init__(self, item, parent):
        super(GroupProperties, self).__init__(parent=parent)
        self.item = weakref.ref(item)

        layout = QVBoxLayout()
        layout.setObjectName('light_editor_group_vertical_box_layout')
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(utils.dpiScale(2))

        self._setupMainGroupBox(layout)
        self.setLayout(layout)

        # Unwrap the layout into a pointer to be able to get the UI name.
        # We use fullName() to ensure a unique name is used
        layoutName = OpenMayaUI.MQtUtil.fullName(long(getCppPointer(layout)[0]))
        cmds.setParent(layoutName)

        self._uiLayout = cmds.columnLayout(adjustableColumn=True)

        # Removing isolate/enabled from the light group as per MAYA-84588
        # self._createAttributeControls()

    def _setupMainGroupBox(self, layout):
        mainGroupBox = QGroupBox()
        mainGroupBox.setContentsMargins(0, 0, 0, 0)
        mainGroupBoxLayout = Layout()
        mainGroupBoxLayout.setVerticalSpacing(utils.dpiScale(2))
        mainGroupBox.setLayout(mainGroupBoxLayout)
        layout.addWidget(mainGroupBox)

    def _createAttributeControls(self):
        ctrl = cmds.checkBoxGrp(label="", numberOfCheckBoxes=2, labelArray2=[kEnable, kIsolate], preventOverride=True)
        cmds.connectControl(ctrl, self.item().model.name() + ".selfEnabled", index=2)
        cmds.connectControl(ctrl, self.item().model.name() + ".isolateSelected", index=3)

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
