import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Support for the Evaluation Toolkit UI section containing controls for the HUD
'''

__all__ = ['EvaluationToolkitSectionHUD']

import maya.cmds as cmds
import maya.mel as mel
from maya.common.ui import LayoutManager, callback_tool
from maya.app.evaluationToolkit.evaluation_toolkit_utilities import EvaluationToolkitSection
from maya.app.evaluationToolkit.evaluation_toolkit_utilities import section_layout
from maya.plugin.evaluator.CacheUiHud import CacheUiHud

#======================================================================
class EvaluationToolkitSectionHUD(EvaluationToolkitSection):
    '''
    Class providing support for UI and functionality of the evaluation toolkit HUD section.
    '''
    #----------------------------------------------------------------------
    def __init__(self, title, start_closed):
        '''
        Set up the framework for the HUD controls
        :param title: Name of the main HUD section
        :param get_graphviz_manager: Callback to retrieve a GraphVizManager for use in DOT/PDF file generation
        '''
        layout_widget = cmds.frameLayout(label=title, **section_layout(start_closed))
        with LayoutManager( layout_widget ):
            # Once created this will manage itself
            CacheUiHud().create_toolkit_button()
            cmds.frameLayout(layout_widget, edit=True, expandCommand=callback_tool(CacheUiHud(), CacheUiHud.callback_update_visibility))
            self.checkbox_hud_evaluation = cmds.checkBoxGrp( label=''
                                                           , label1=maya.stringTable['y_EvaluationToolkitSectionHUD.kEvaluationHUD' ]
                                                           , changeCommand=callback_tool(self, self.callback_evaluation_hud_changed)
                                                           )

            self.checkbox_hud_frame_rate = cmds.checkBoxGrp( label=''
                                                           , label1=maya.stringTable['y_EvaluationToolkitSectionHUD.kFrameRateHUD' ]
                                                           , changeCommand=callback_tool(self, self.callback_frame_rate_hud_changed)
                                                           )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_evaluation_hud_changed(tool):
        '''
        Invoked when the evaluation HUD value was changed via the checkbox
        '''
        assert tool is not None
        assert tool.checkbox_hud_evaluation is not None
        mel.eval( 'SetEvaluationManagerHUDVisibility({})'.format( 1 if cmds.checkBoxGrp( tool.checkbox_hud_evaluation, query=True, value1=True ) else 0 ) )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_frame_rate_hud_changed(tool):
        '''
        Invoked when the frame rate HUD value was changed via the checkbox
        '''
        assert tool is not None
        assert tool.checkbox_hud_frame_rate is not None
        mel.eval( 'setFrameRateVisibility({})'.format( 1 if cmds.checkBoxGrp( tool.checkbox_hud_frame_rate, query=True, value1=True ) else 0 ) )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_plugin_state(tool, new_state):
        '''
        Callback to match the visibility of the cache HUD with the plug-in loaded state
        :param tool: EvaluationToolkitSectionHUD object to be updated
        :param new_state: True if the plug-in was just loaded, False if just unloaded
        '''
        assert tool is not None
        cmds.checkBoxGrp( tool.checkbox_hud_cache, edit=True, visible=new_state )

    #----------------------------------------------------------------------
    def update_ui(self):
        '''Update the HUD values to match the current optionVar values'''
        # Both of these could be converted to OptionVars but for now use the old fashioned access
        cmds.checkBoxGrp( self.checkbox_hud_evaluation, edit=True, value1=mel.eval('optionVar -query evaluationVisibility') )
        cmds.checkBoxGrp( self.checkbox_hud_frame_rate, edit=True, value1=mel.eval('optionVar -query frameRateVisibility') )

    #----------------------------------------------------------------------
    @staticmethod
    def ui_deleted(tool):
        '''
        Callback when the UI is deleted - cleans up the class variables.
        '''
        assert tool is not None
        tool.checkbox_hud_evaluation = None
        tool.checkbox_hud_frame_rate = None

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
