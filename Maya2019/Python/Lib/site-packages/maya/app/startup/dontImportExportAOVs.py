import maya.app.renderSetup.model.rendererCallbacks as rendererCallbacks
import maya.cmds as cmds
import maya.api.OpenMaya as OpenMaya
import maya.app.renderSetup.common.utils as commonUtils

import os

# Prevent AOVs from being imported and exported.
# For import, compare the list of AOV nodes before and after the import and
# delete the difference (the imported ones).
# NOTE: the AOV nodes HAVE to be "exported" during rendering, which is ensured
# using the environment variable 'MAYA_BATCH_RENDER_EXPORT'.

_aovNodes = []
_aovNodeTypes = []
_aovNodesPre = []
_callbackIDs = []
# When the user changes the "Preferred Render Setup System", it should not
# change the behavior of what happens during the import operation to
# accomodate the new mode. Also, avoids calling cmds.mayaHasRenderSetup()
# for no reason (performance optimization)
_first_call_to_callback = True

# This aovNodeTypesTest list is used to test import/export of AOVs in the
# regression tests. We need it since Maya doesn't currently ship with an AOV
# capable renderer so we need a way to test things with mayaSoftware.
aovNodeTypesTest = []

def initialize():
    ''' Create callbacks related to File Import and File Export, to prevent
        AOVs from being imported/exported. Theoretically, the callbacks should
        only be created when Render Setup is used. When legacy render layers
        are used instead, we should not execute the body of this function.
        In practice, we remove them during the first fileImport or fileExport
        that occurs.
    '''
    global _callbackIDs
    callbacks = {
        OpenMaya.MSceneMessage.kBeforeImport: _beforeFileImport,
        OpenMaya.MSceneMessage.kAfterImport : _fileImported,
        OpenMaya.MSceneMessage.kBeforeExport: _beforeFileExport,
        OpenMaya.MSceneMessage.kAfterExport: _fileExported }

    for type, callback in callbacks.iteritems():
        _callbackIDs.append(OpenMaya.MSceneMessage.addCallback(type, callback))

def finalize():
    ''' Remove callbacks associated to file import operations. '''
    global _callbackIDs
    for id in _callbackIDs:
        OpenMaya.MMessage.removeCallback(id)
    _callbackIDs = []

def _getRenderers():
    ''' Return the list of renderers in the rendererCallbacks dict. '''
    # It is better to get the list of renderers this way instead of
    # cmds.renderer(query=True, namesOfAvailableRenderers=True), because, if
    # the corresponding renderer is not loaded before File Import,
    # the call to the rendererCmd in creation mode is deferred, meaning
    # we cannot predict exactly when the AOV capable renderer will be added to
    # the list of namesOfAvailableRenderers. Thus, the newly loaded renderer
    # might not be among the namesOfAvailableRenderers which can cause issues
    # of AOVs undesirably getting imported.
    # However, what is not deferred is the registration in rendererCallbacks
    # Thus, when we call the function fileImported, the AOV capable renderer
    # is among the keys of the dict rendererCallbacks.rendererCallbacks.
    return list(rendererCallbacks.rendererCallbacks.keys())

def _getaovNodeTypes():
    ''' Return the list of AOV node types for all registered renderers. '''
    # Get the list of renderers according to the rendererCallbacks dict.
    renderers = _getRenderers()

    # Loop over all registered renderers, and get their AOV callbacks
    aovCallbacks = []
    for r in renderers:
        callback = rendererCallbacks.getCallbacks(r, rendererCallbacks.CALLBACKS_TYPE_AOVS)
        if callback:
            aovCallbacks.append(callback)

    # Get the AOV node types from the AOV callbacks
    aovNodeTypes = []
    for cb in aovCallbacks:
        aovNodeTypes.extend(cb.aovNodeTypes())
    return aovNodeTypes

def _renderSetupEnabled():
    # When we initialize Maya, we should only create the 2 callbakcs
    # _beforeFileImport and _fileImported if the current Preferred Render Setup
    # System is Render Setup. However, we could not find the right way to get
    # the real value of the optionVar "renderSetupEnable" during initialization,
    # so, instead, we simply remove the 2 callbacks during the first file import
    # encountered if the value of the optionVar is 0 (False).
    global _first_call_to_callback
    if not _first_call_to_callback:
        return True
    _first_call_to_callback = False
    return cmds.mayaHasRenderSetup()

def _beforeFileImport(_):
    """ No node added notification is sent during file import.  Therefore, we
        take a snapshot of all AOV nodes before the import, then take one
        after import, and remove all AOV nodes that were created by the
        import.
    """
    # If render setup is not enabled, then we can remove the file callbacks
    # as they are unnecessary.
    if not _renderSetupEnabled():
        finalize()
        return

    global _aovNodeTypes
    global _aovNodesPre
    _aovNodeTypes = _getaovNodeTypes()

    # The aovs.aovNodeTypesTest list should always be empty, except during
    # the tests where we have to test the current function without an
    # AOV capable renderer, so we temporarily extend the aovNodeTypes list.
    _aovNodeTypes.extend(aovNodeTypesTest)

    if not _aovNodeTypes:
        return

    _aovNodesPre = set(cmds.ls(type=_aovNodeTypes))

def _fileImported(_):
    global _aovNodeTypes
    global _aovNodesPre
    if not _aovNodeTypes:
        # File import might have loaded a renderer plugin.  Make another
        # pass at looking for AOV node types.  If we find some, this simply
        # means the initial set of nodes was empty.
        _aovNodeTypes = _getaovNodeTypes()

        if _aovNodeTypes:
            _aovNodesPre = set()
        else:
            return

    aovNodesPost = set(cmds.ls(type=_aovNodeTypes))

    aovImportedNodes = aovNodesPost - _aovNodesPre

    # Remove imported AOV nodes using non-undoable delete (since file
    # import is not undoable).  For some renderers (e.g. Arnold), deleting
    # an AOV node will delete the corresponding AOV filter node, so be
    # prepared to deal with nodes that have already been deleted.
    dgMod = OpenMaya.MDGModifier()
    for aovNode in (aovNode for aovNode in (commonUtils.nameToNode(name) for name in aovImportedNodes) if aovNode is not None):
        dgMod.deleteNode(aovNode)
    dgMod.doIt()

def _setDoNotWrite(nodes, state):
    for n in nodes:
        OpenMaya.MFnDependencyNode(n).setDoNotWrite(state)

def _beforeFileExport(self):
    # If render setup is not enabled, then we can remove the file callbacks
    # as they are unnecessary.
    if not _renderSetupEnabled():
        finalize()
        return
    # If the current export operation happens during a render, let the AOVs
    # get "exported".
    if os.getenv('MAYA_BATCH_RENDER_EXPORT'):
        return

    # Gather all aov nodes in a global variable to set them back to writable
    # after the export operation.
    global _aovNodes
    aovNodeTypes = _getaovNodeTypes()
    # The aovs.aovNodeTypesTest list should always be empty, except during
    # the tests where we have to test the current function without an
    # AOV capable renderer, so we temporarily extend the aovNodeTypes list.
    aovNodeTypes.extend(aovNodeTypesTest)

    if not aovNodeTypes:
        return

    # Get the names of the aovs of types aovNodeTypes, then get and add the
    # corresponding nodes to the list of aovNodes.
    _aovNodes = [node for node in (commonUtils.nameToNode(name) for name in cmds.ls(type=aovNodeTypes)) if node is not None]

    # By design, AOV nodes should not get exported for multiple reasons.
    _setDoNotWrite(_aovNodes, True)

def _fileExported(self):
    global _aovNodes
    if os.getenv('MAYA_BATCH_RENDER_EXPORT') or not _aovNodes:
        return

    # Once export is done, restore AOV nodes to being writable.
    _setDoNotWrite(_aovNodes, False)
    # Reset the aov nodes list, since they might change between now and the
    # next export so they have to be computed once again.
    _aovNodes = []# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
