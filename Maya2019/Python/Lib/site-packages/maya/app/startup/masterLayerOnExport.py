import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.app.renderSetup.common.utils as commonUtils
import maya.app.renderSetup.model.renderSetup as renderSetup
import maya.cmds as cmds
import maya.mel as mel
import os
import maya.api.OpenMaya as OpenMaya
import maya.OpenMayaMPx

_callbackIDs = []

_prevVisibleRenderLayer = None

_first_call_to_callback = True

_supported_renderer_extensions = set(["ass", "mi", "mxs", "rib", "rs", "vrimg"])
_exported_file_extension = None

def initialize():
    '''Create 2 callbacks, one before and one after export, to change to the master
    layer and then back again.'''
    global _callbackIDs
    exportCallbacks = {
        OpenMaya.MSceneMessage.kBeforeExport: _beforeFileExport,
        OpenMaya.MSceneMessage.kAfterExport : _fileExported }
    for type, callback in exportCallbacks.iteritems():
        _callbackIDs.append(OpenMaya.MSceneMessage.addCallback(
            type, callback))

def finalize():
    '''Remove the created callbacks'''
    global _callbackIDs
    for id in _callbackIDs:
        OpenMaya.MMessage.removeCallback(id)
    _callbackIDs = []

def _renderSetupEnabled():
    #When we initialize Maya, we should only create the 2 callbacks _beforeFileExport and _fileExported
    #if the current Preferred Render Setup System is Render Setup.
    #However, we could not find the right way to get the real value of the optionVar "renderSetupEnable" during initialization,
    #so, instead, we simply remove the 2 callbacks during the first file export encountered if the value of the optionVar is 0 (False).
    global _first_call_to_callback
    if not _first_call_to_callback:
        return True
    _first_call_to_callback = False
    return cmds.mayaHasRenderSetup()

def _noSwitchToMaster():
    return os.getenv("MAYA_BATCH_RENDER_EXPORT") or os.getenv("MAYA_CUT_COPY_EXPORT") == "" or _exported_file_extension in _supported_renderer_extensions


def _beforeFileExport(_):
    """ Change to the master layer before file export.
    """
    global _prevVisibleRenderLayer
    global _exported_file_extension

    # If render setup is not enabled, then we can remove the callbacks
    # as they are unnecessary.
    if not _renderSetupEnabled():
        finalize()
        return

    # If we're batch rendering we don't want to switch to the master layer. We also
    # don't want to switch to the master layer if we're export a renderer specific file
    # such as an "ass" file in the case of Arnold. If we're doing a cut or copy related
    # export we also don't want to switch to the master layer.
    translator = maya.OpenMaya.MFileIO.beforeExportUserFileTranslator()
    _exported_file_extension = None if not translator else translator.defaultExtension()
    if _noSwitchToMaster():
        return

    if renderSetup.hasInstance():
        rsi = renderSetup.instance()
        _prevVisibleRenderLayer = rsi.getVisibleRenderLayer()
        defaultRenderLayer = rsi.getDefaultRenderLayer()
        if _prevVisibleRenderLayer != defaultRenderLayer:
            cmds.warning(maya.stringTable['y_masterLayerOnExport.kExportingMasterLayerContent' ])
            if not cmds.about(batch=True):
                mainProgressBar = mel.eval('$tmp = $gMainProgressBar')
                cmds.progressBar(mainProgressBar, edit=True, beginProgress=True, status="", maxValue=3)
            rsi.switchToLayer(defaultRenderLayer)
            if not cmds.about(batch=True):
                cmds.progressBar(mainProgressBar, edit=True, step=1, status="")

def _fileExported(_):
    """ Change back to the previously saved render layer after export.
    """
    global _prevVisibleRenderLayer

    # If we're batch rendering we don't need to switch back to the previously visible layer.
    # The same goes for if we're exporting a renderer specific file such as an "ass" file in the case of Arnold.
    # Also the case for exports due to cut or copy.
    if _noSwitchToMaster():
        return

    if renderSetup.hasInstance() and _prevVisibleRenderLayer != renderSetup.instance().getDefaultRenderLayer():
        if not cmds.about(batch=True):
            mainProgressBar = mel.eval('$tmp = $gMainProgressBar')
            cmds.progressBar(mainProgressBar, edit=True, step=1, status="")
        renderSetup.instance().switchToLayer(_prevVisibleRenderLayer)
        _prevVisibleRenderLayer = None
        if not cmds.about(batch=True):
            cmds.progressBar(mainProgressBar, edit=True, endProgress=True)
# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
