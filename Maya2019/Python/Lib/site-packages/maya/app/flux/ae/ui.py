from maya.app.flux.commonImports import *
import maya.app.flux.ui.core as fui
from maya.app.flux.ui.core import pix

import maya.OpenMayaUI as omui
import types

class LayoutInterface(object):
    @staticmethod
    def wrap(obj, layoutType):
        fui.registerQtObject(obj)
        obj.layoutType = layoutType
        obj.childLayouts = []
        obj.parentLayout = None
        obj.parentableLayout = None

        toBeImplemented = ['updateHeight']

        for f in toBeImplemented:
            if not hasattr(obj, f):
                raise NotImplementedError("Function not implemented: " + f)

        LayoutInterface.addMethod(obj, 'resizeUpstream')
        LayoutInterface.addMethod(obj, 'resizeDownstream')
        LayoutInterface.addMethod(obj, 'getFullName')
        if layoutType != 'stackedLayout':
            LayoutInterface.addMethod(obj, 'addWidget')
        LayoutInterface.addMethod(obj, 'addSpacing')
        LayoutInterface.addMethod(obj, 'addStretch')
        LayoutInterface.addMethod(obj, 'setAsMelParent')

    @staticmethod
    def addMethod(obj, methodName):
        method = LayoutInterface.__dict__[methodName]
        obj.__dict__[methodName] = types.MethodType(method, obj, LayoutInterface)      

    def resizeUpstream(self):
        self.updateHeight()
        if self.parentLayout is not None:
            self.parentLayout.resizeUpstream()

    def resizeDownstream(self):
        for c in self.childLayouts:
            c.resizeDownstream()

    def getFullName(self):
        if self.parentableLayout is None:
            raise TypeError('Class not parentable: %s' % self.__class__.__name__)

        return omui.MQtUtil.fullName( long(unwrapInstance(self.parentableLayout)[0]) )

    def addWidget(self, widget, stretchFactor=0, alignment=0):
        if self.parentableLayout is None:
            raise TypeError('Class not parentable: %s' % self.__class__.__name__)

        self.parentableLayout.addWidget(widget, stretchFactor, alignment)
        self.childLayouts.append(widget)
        if hasattr(widget, 'parentLayout'):
            widget.parentLayout = self

    def addSpacing(self, value):
        if self.parentableLayout is None:
            raise TypeError('Class not parentable: %s' % self.__class__.__name__)

        self.parentableLayout.addSpacing(value)

    def addStretch(self, factor=1):
        if self.parentableLayout is None:
            raise TypeError('Class not parentable: %s' % self.__class__.__name__)

        self.parentableLayout.addStretch(factor)

    def setAsMelParent(self):
        if self.parentableLayout is None:
            return
        cmds.setParent(self.getFullName())

# Top Level Mandatory Layout
class Layout(qt.QWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self):
        super(Layout, self).__init__()
        LayoutInterface.wrap(self, 'wrapper')

        self.setFixedHeight(pix(10))
        self.contents = Contents(self)

        self.parentName = cmds.setParent(q=True)
        self.addWidgetToParent(self.parentName, self)

        self.parent().children()[0].setContentsMargins(0,0,0,0)

        self.parentableLayout = self.contents.layout()

    def updateHeight(self, childHeight=None):
        if childHeight is None:
            height = self.contents.sizeHint().height()
            
            if height == 0:
                self.setContentsMargins(0,0,0,0)
                self.contents.setFixedHeight(height)
                self.setFixedHeight(height)
            else:
                self.setContentsMargins(0,pix(1),0,0)
                self.contents.setFixedHeight(height+2)
                self.setFixedHeight(height+2)

    def resizeEvent(self, e):
        super(Layout, self).resizeEvent(e)
        if self.rect().width() != self.contents.rect().width():
            self.contents.setFixedWidth(self.rect().width())

    def addWidgetToParent(self, parentName, widget):
        currentParent = omui.MQtUtil.findLayout(parentName)
        currentParent = wrapInstance(long(currentParent), qt.QWidget)
        layout = currentParent.layout()
        layout.addWidget(widget)

    def hideEvent(self, e):
        qt.QWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class Contents(qt.QWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self, parent):
        super(Contents, self).__init__(parent)
        self.setContentsMargins(0,0,0,0)
        fui.setVLayout(self,pix(2),0,0,0,0)

        fui.registerQtObject(self)
        fui.registerQtObject(self.layout())

    def hideEvent(self, e):
        qt.QWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class Tab(qt.QWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self):
        super(Tab, self).__init__()
        LayoutInterface.wrap(self, 'tab')

        fui.setWidgetWindowColor(self, [68,68,68])
        self.setAutoFillBackground(True)

        fui.setVLayout(self,pix(2),pix(5),pix(2),pix(5),pix(2))
        #self.layout().addSpacing()

        fui.registerQtObject(self.layout())
        self.parentableLayout = self.layout()

    def updateHeight(self):
        height = self.sizeHint().height()
        self.setFixedHeight(height)

    def hideEvent(self, e):
        qt.QWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class TabLayout(qt.QTabWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self, parent):
        super(TabLayout, self).__init__()
        LayoutInterface.wrap(self, 'tabLayout')

        self.currentChanged.connect(self.currentTabChanged)

        self.setStyleSheet('QTabWidget{border:none;}')

        self.stackedWidget = qt.QStackedWidget()
        fui.registerQtObject(self.stackedWidget)
        fui.registerQtObject(self.stackedWidget.children()[0])

        parent.addWidget(self)
        parent.addWidget(self.stackedWidget)

    def addTabNamed(self, widget, name):
        if widget.layoutType != 'tab':
            return
        self.childLayouts.append(widget)
        if hasattr(widget, 'parentLayout'):
            widget.parentLayout = self
        self.addTab(qt.QWidget(), name)
        self.stackedWidget.addWidget(widget)
        
    def updateHeight(self):
        height = self.childLayouts[self.currentIndex()].sizeHint().height()
        self.setFixedHeight(pix(20))          
        self.stackedWidget.setFixedHeight(height)     

    def currentTabChanged(self, index):
        self.stackedWidget.setCurrentIndex(index)
        self.resizeUpstream()

    def hideEvent(self, e):
        qt.QTabWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QTabWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class FrameLayout(fui.FrameWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self, text, expanded=False):
        super(FrameLayout, self).__init__(text, expanded)
        LayoutInterface.wrap(self, 'frameLayout')

        fui.registerQtObject(self.layout())
        fui.registerQtObject(self.contents)
        fui.registerQtObject(self.contents.layout())

        self.parentableLayout = self.contents.layout()

    def updateHeight(self):
        if self.expanded:
            height = self.contents.sizeHint().height()
            self.setFixedHeight(height+pix(22))
        else:
            self.setFixedHeight(pix(18))

    def switchMode(self):
        super(FrameLayout, self).switchMode()
        self.resizeUpstream()

    def setEnabled(self, enabled):
        self.contents.setEnabled(enabled)

    def hideEvent(self, e):
        fui.FrameWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        fui.FrameWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class HorizontalLayout(qt.QWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self, offset=0, height=None, parent=None):
        super(HorizontalLayout, self).__init__(parent)
        LayoutInterface.wrap(self, 'horizontalLayout')
        fui.setHLayout(self,pix(2),offset,0,0,0)

        self.specificHeight = height

        if self.specificHeight is not None:
            self.setFixedHeight(self.specificHeight)

        fui.registerQtObject(self.layout())
        self.parentableLayout = self.layout()

    def updateHeight(self):
        if self.specificHeight is not None:
            self.setFixedHeight(self.specificHeight)
        else:
            self.setFixedHeight(self.sizeHint().height())

    def hideEvent(self, e):
        qt.QWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class VerticalLayout(qt.QWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self, offset=0, height=None, parent=None):
        super(VerticalLayout, self).__init__(parent)
        LayoutInterface.wrap(self, 'verticalLayout')
        fui.setVLayout(self,pix(2),0,offset,0,0)

        self.specificHeight = height

        if self.specificHeight is not None:
            self.setFixedHeight(self.specificHeight)

        fui.registerQtObject(self.layout())
        self.parentableLayout = self.layout()

    def updateHeight(self):
        if self.specificHeight is not None:
            self.setFixedHeight(self.specificHeight)
        else:
            self.setFixedHeight(self.sizeHint().height())

    def hideEvent(self, e):
        qt.QWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class IndentLayout(qt.QWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self, name='', parent=None, autoStretch=True):
        super(IndentLayout, self).__init__(parent)
        LayoutInterface.wrap(self, 'indentLayout')
        fui.setHLayout(self,0,0,0,0,0)

        w = fui.widgetWithLayout('H',0,0,0,0,0)
        w.setFixedWidth(pix(148))
        w.layout().addStretch()

        self.label = qt.QLabel(name.strip())
        self.label.setMargin(0)
        self.label.setContentsMargins(0,0,pix(2),0)
        w.layout().addWidget(self.label)
        self.layout().addWidget(w, 0)

        self.contents = fui.widgetWithLayout('H',0,0,0,0,0)
        self.layout().addSpacing(pix(2))

        if autoStretch:
            self.layout().addWidget(self.contents, 0)
            self.layout().addStretch(1)
        else:
            self.layout().addWidget(self.contents, 1)

        self.layout().addSpacing(pix(16))

        fui.registerQtObject(self.layout())
        fui.registerQtObject(self.contents)
        fui.registerQtObject(self.contents.layout())
        self.parentableLayout = self.contents.layout()

    def updateHeight(self):
        pass

    def setEnabled(self, enabled):
        self.contents.setEnabled(enabled)

    def hideEvent(self, e):
        qt.QWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class StackedLayout(qt.QStackedWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self, parent=None):
        super(StackedLayout, self).__init__(parent)
        self.addPage = self.addWidget
        LayoutInterface.wrap(self, 'stackedLayout')
        fui.registerQtObject(self.children()[0])

    def updateHeight(self):
        height = self.currentWidget().sizeHint().height()
        self.setFixedHeight(height)

    def setIndex(self, i):
        self.setCurrentIndex(i)
        self.resizeUpstream()

    def hideEvent(self, e):
        qt.QStackedWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QStackedWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class StackedPage(qt.QWidget):
    visibilityChanged = qt.Signal(bool)
    def __init__(self, parent=None):
        super(StackedPage, self).__init__(parent)
        LayoutInterface.wrap(self, 'stackedPage')
        fui.setVLayout(self,pix(2),0,0,0,0)
        fui.registerQtObject(self.layout())
        self.parentableLayout = self.layout()

    def updateHeight(self):
        self.setFixedHeight(self.sizeHint().height())

    def hideEvent(self, e):
        qt.QWidget.hideEvent(self, e)
        self.visibilityChanged.emit(False)

    def showEvent(self, e):
        qt.QWidget.showEvent(self, e)
        self.visibilityChanged.emit(True)

class ZeroHBoxLayout(qt.QHBoxLayout):
    def __init__(self, parent=None):
        super(ZeroHBoxLayout, self).__init__(parent)
        self.setContentsMargins(0,0,0,0)
        self.setSpacing(0)

class ZeroVBoxLayout(qt.QVBoxLayout):
    def __init__(self, parent=None):
        super(ZeroVBoxLayout, self).__init__(parent)
        self.setContentsMargins(0,0,0,0)
        self.setSpacing(0)

class IconButton(qt.QPushButton):
    def __init__(self, buttonName, iconName, parent=None):
        super(IconButton, self).__init__(buttonName, parent=parent)
        self.setIcon(fui.getIconFromName(iconName))
        self.setFixedHeight(pix(25))

class RadioImageGroup(qt.QWidget):
    clicked = qt.Signal(int)
    def __init__(self, icons, currentIndex=0, parent=None):
        super(RadioImageGroup, self).__init__(parent)
        self.setLayout(qt.QHBoxLayout())
        self.layout().setContentsMargins(0,0,0,0)
        self.layout().setSpacing(0)
        self.buttons = []
        for i, icon in enumerate(icons):
            btn = fui.ImageButton(icon)
            btn.setBackgroundColor(qt.QColor(64, 134, 169))
            btn.clicked.connect(lambda i=i: self.radioClicked(i))
            self.buttons.append(btn)
            self.layout().addWidget(btn)


        self.buttons[currentIndex].setHighlighted(True)
        self.currentIndex = currentIndex

    def radioClicked(self, index):
        self.setIndex(index)
        self.clicked.emit(index)
        

    def setIndex(self, index):
        self.buttons[self.currentIndex].setHighlighted(False)
        self.currentIndex = index
        self.buttons[self.currentIndex].setHighlighted(True)


class ToolButton(fui.ImageButton):
    def __init__(self, imageName, **kwargs):
        super(ToolButton, self).__init__(imageName, **kwargs)









# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
