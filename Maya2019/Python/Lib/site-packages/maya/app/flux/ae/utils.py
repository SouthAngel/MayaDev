import maya.app.flux.ae.singleton as singleton
import maya.mel as mel

def onCreate(key):
    node, key = key.split('.')
    if key in singleton.customInstances:
        singleton.customInstances[key].onCreate(node)

def onReplace(key):
    node, key = key.split('.')
    if key in singleton.customInstances:
        singleton.customInstances[key].onReplace(node)

def registerInstance(obj):
    key = obj.__class__.__name__ + '_AETx_' + str(id(obj))
    while key in singleton.customInstances:
        key += '1'
    singleton.customInstances[key] = obj
    obj.instanceKey = key

def deregisterInstance(obj):
    if obj.instanceKey in singleton.customInstances:
        del singleton.customInstances[obj.instanceKey]

def registerMelProcWithStringArg(procName, funcName):
    moduleName = 'maya.app.flux.ae.utils'
    numArgs = 1
    params = []
    pyparams = []
    for i in xrange(numArgs):
        params.append('string $_%d' % i)
        pyparams.append('\'" + $_%d + "\'' % i)
    params = ','.join(params)
    pyparams = ','.join(pyparams)
    script = 'global proc %s(%s){python("import %s; %s.%s(%s);");}' % (procName, params, moduleName, moduleName, funcName, pyparams)
    mel.eval(script)

def getAEEventFuncs():
    createId = 'flux_ae_utils_onCreate'
    replaceId = 'flux_ae_utils_onReplace'

    if createId not in singleton.registeredFuncs:
        registerMelProcWithStringArg(createId, 'onCreate')
        registerMelProcWithStringArg(replaceId, 'onReplace')
        singleton.registeredFuncs.add(createId)
        singleton.registeredFuncs.add(replaceId)
    return [createId, replaceId]

def wrapAETemplate(nodeType):
    procName = 'AE%sTemplate' % nodeType
    script = '''global proc %s(string $nodeName){
    python("import maya.app.flux.ae.utils;maya.app.flux.ae.utils.loadTemplate('%s','" + $nodeName + "')");}''' % (procName, nodeType)
    return script

def loadTemplate(nodeType, nodeName):
    try:
        if nodeType in singleton.registeredTemplates:
            classPath = singleton.registeredTemplates[nodeType]
            modules = classPath.split('.')
            className = modules[-1]
            moduleName = '.'.join(modules[:-1])
            if moduleName:
                import importlib
                from types import ModuleType
                module = importlib.import_module(moduleName)
                classObj = getattr(module, className)
                classObj(nodeName)
            else:
                if className in globals():
                    globals()[className](nodeName)
    except Exception as e:
        print 'Error loading AE Template for node type %s: %s' % (nodeType, str(e))

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
