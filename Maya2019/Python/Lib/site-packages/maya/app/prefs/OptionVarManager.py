import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Singleton class that manages the list of all managed OptionVar objects.

This class was created to handle in a generic way the free-for-all of optionVar
handling present in the preferences window and related scripts. The various
places optionVar states were managed includes these scripts from Maya/Maya/scripts:
    createPreferencesOptVars.mel
    createPrefWindUI.mel
    preferencesWnd.mel
    prefsHoldCurrentState.mel
    syncPreferencesOptVars.mel
    updatePrefWndUI.mel

To make the manager aware of your optionVar you just create an OptionVar object and tell
the manager about it:

    OptionVarManager.manage( OptionVar( 'intVar', OPTION_VAR_TYPE_INT, 5 ) )

Thereafter you can either use the usual optionVar command to get and set its value, or you
can use the OptionVar managed class either from a copy you have kept or by looking it up
in the manager

    my_option_var = OptionVarManager.find( 'intVar' )
'''
__all__ = [ 'OptionVarManager' ]

from maya.app.prefs.OptionVar import OptionVar

#======================================================================
class OptionVarManager(object):
    '''
    Class that manages the states for all registered optionVars.
    :member option_vars: Dictionary of optionVars being managed.
        KEY : Name of optionVar
        VALUE : List of management information
            KEY_TYPE             : Option var data type
            KEY_DEFAULT          : Option var default value
            KEY_HELD             : Remembered option var value
            KEY_SYNC_TO_VAR_FN   : Callback to take the app implementation of the
                                   optionVar data and put its value into the optionVar
            KEY_SYNC_FROM_VAR_FN : Callback to set the app implementation of the optionVar
                                   data to be the current value of the optionVar
    '''
    # Dictionary of managed OptionVars.
    #   KEY   = OptionVar name
    #   VALUE = OptionVar being managed (also contains the name)
    option_vars = {}

    #----------------------------------------------------------------------
    @classmethod
    def as_str(cls):
        '''Return a string representation of all of the active OptionVars'''
        values = 'OptionVarManager'
        for option_var in cls.option_vars.values():
            values += '\n    ' + str(option_var)
        return values

    #----------------------------------------------------------------------
    @classmethod
    def manages(cls, var_name):
        '''
        :param var_name: Name of optionVar to check
        :return: True if the manager is actively managing the optionVar var_name
        '''
        return var_name in cls.option_vars

    #----------------------------------------------------------------------
    @classmethod
    def manage(cls, option_var):
        '''
        Add the option_var to the set of managed variables
        :param option_var: OptionVar object to be added to the managed list
        :raise AssertionError: If an option variable with the given name is already managed
        '''
        assert option_var.name not in cls.option_vars
        cls.option_vars[option_var.name] = option_var

    #----------------------------------------------------------------------
    @classmethod
    def option_var(cls, option_var_name):
        '''
        Lookup the option_var_name in the managed list, returning the OptionVar
        implementing it, if it exists.
        :param option_var_name: Name of the managed optionVar to retrieve
        :raise KeyError: If the optionVar is not in the managed list
        :return: OptionVar corresponding to the managed option_var_name
        '''
        if option_var_name not in cls.option_vars:
            raise KeyError( maya.stringTable['y_OptionVarManager.kOptionVarUnmanagedGet' ].format( option_var_name ) )

        return cls.option_vars[option_var_name]

    #----------------------------------------------------------------------
    @classmethod
    def remember_states(cls):
        '''
        Remember the current states of all managed optionVars
        '''
        for option_var in cls.option_vars.values():
            option_var.remember_current()

    #----------------------------------------------------------------------
    @classmethod
    def restore_states(cls):
        '''
        Restore the remembered states of all managed optionVars
        '''
        for option_var in cls.option_vars.values():
            option_var.restore_remembered()

    #----------------------------------------------------------------------
    @classmethod
    def revert_to_defaults(cls):
        '''
        Restore the states of all managed optionVars to their factory defaults
        '''
        for option_var in cls.option_vars.values():
            option_var.revert_to_default()

    #----------------------------------------------------------------------
    @classmethod
    def read_preferences_from_state(cls):
        '''
        Update all of the optionVar values to match the Maya state.
        (Called after preference modifications were undone or canceled.)
        '''
        for option_var in cls.option_vars.values():
            option_var.do_read_preference_from_state()

    #----------------------------------------------------------------------
    @classmethod
    def set_state_from_preferences(cls):
        '''
        Take all of the optionVar values and update the Maya state to reflect
        those values. (Called after preferences were read or updated.)
        '''
        for option_var in cls.option_vars.values():
            option_var.do_set_state_from_preference()

    #----------------------------------------------------------------------
    @classmethod
    def clear_all(cls):
        '''
        Debugging method to remove all option vars from the manager
        '''
        cls.option_vars.clear()

#######################################################################
# Unit testing when run as standalong
#######################################################################
if __name__ == '__main__':
    import unittest
    from maya.app.prefs.OptionVar import OPTION_VAR_TYPE_INT

    # Has to be hacked through a string to prevent the preprocessor from complaining.
    exec 'def _L10N(_, english_string):  return english_string'

    class OptionVarManagerTest(unittest.TestCase):
        '''
        Class that contains the unit tests for the OptionVarManager class
        '''
        #----------------------------------------
        def test_add(self):
            '''
            Test addition of OptionVars to the manager
            '''
            option_var_1 = OptionVar('ov1', OPTION_VAR_TYPE_INT, 1)
            option_var_2 = OptionVar('ov2', OPTION_VAR_TYPE_INT, 2)
            OptionVarManager.manage( option_var_1 )
            OptionVarManager.manage( option_var_2 )

            self.assertIsNotNone( OptionVarManager.option_var( 'ov1' ) )
            self.assertIsNotNone( OptionVarManager.option_var( 'ov2' ) )
            self.assertTrue( OptionVarManager.manages( 'ov1' ) )
            self.assertTrue( OptionVarManager.manages( 'ov2' ) )

            OptionVarManager.clear_all()

        #----------------------------------------
        def test_restore(self):
            '''
            Test remembering and restoring of OptionVars to the manager
            '''
            option_var_1 = OptionVar('ov1', OPTION_VAR_TYPE_INT, 1)
            option_var_2 = OptionVar('ov2', OPTION_VAR_TYPE_INT, 2)
            OptionVarManager.manage( option_var_1 )
            OptionVarManager.manage( option_var_2 )

            OptionVarManager.remember_states()
            option_var_1.set_value( 10 )
            option_var_2.set_value( 20 )

            OptionVarManager.restore_states()
            self.assertEqual( option_var_1.get_value(), 1 )
            self.assertEqual( option_var_2.get_value(), 2 )

            OptionVarManager.clear_all()

        #----------------------------------------
        def test_revert_to_default(self):
            '''
            Test reverting to defaults of OptionVars to the manager
            '''
            option_var_1 = OptionVar('ov1', OPTION_VAR_TYPE_INT, 1)
            option_var_2 = OptionVar('ov2', OPTION_VAR_TYPE_INT, 2)
            OptionVarManager.manage( option_var_1 )
            OptionVarManager.manage( option_var_2 )

            option_var_1.set_value( 10 )
            option_var_2.set_value( 20 )

            OptionVarManager.revert_to_defaults()
            self.assertEqual( option_var_1.get_value(), 1 )
            self.assertEqual( option_var_2.get_value(), 2 )

            OptionVarManager.clear_all()

    unittest.main()

# ===========================================================================
# Copyright 2018 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
